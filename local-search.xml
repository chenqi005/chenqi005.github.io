<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第一阶段：网络安全模块</title>
    <link href="/2025/02/25/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/"/>
    <url>/2025/02/25/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="第1阶段-网络安全模块"><a href="#第1阶段-网络安全模块" class="headerlink" title="第1阶段 网络安全模块"></a>第1阶段 网络安全模块</h1><h2 id="协议基础"><a href="#协议基础" class="headerlink" title="协议基础"></a>协议基础</h2><h3 id="企业网络架构介绍"><a href="#企业网络架构介绍" class="headerlink" title="企业网络架构介绍"></a>企业网络架构介绍</h3><h4 id="一、企业网络分类"><a href="#一、企业网络分类" class="headerlink" title="一、企业网络分类"></a>一、企业网络分类</h4><p>公司网络：比较注重成本</p><p>教育网络：省、市教育局连接</p><p>政府网络：稳定、安全性（保密性）高</p><p>金融网络：时效性、安全性</p><p>如何实现企业网络的远程互联呢？</p><ul><li>专线</li><li>VPN</li></ul><h4 id="二、企业网络架构"><a href="#二、企业网络架构" class="headerlink" title="二、企业网络架构"></a>二、企业网络架构</h4><p>企业的网络架构主要分为两种，一种是适用于小型企业的扁平化的企业架构，另一种则是适用于中大型企业的层次化的企业架构。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20240910195000619.png"></p><p>1、扁平化的企业架构</p><p>一般来说，网络终端接入数量比较少，且对网络要求比较低时，会选择扁平化的企业结构。</p><p>优点：部署简单（结构简单），成本低（设备比较少）</p><p>缺点：（1）扩展性差；</p><p>​（2）可靠性低，容易出现单点故障（可以使用双出口的方式解决，选择两个供应商）；</p><p>​（3）流量瓶颈；</p><p>名词解释：</p><p>​（1）单点故障：无线路由器连接到运营商的链路出现故障，即使终端显示信号是满格的，也无法连接到网络。</p><p>​（2）流量瓶颈：设备存在吞吐量的限制（每秒能够收发多少数据），当连接的终端数量较大时，带宽相对来说就被限制了。</p><p>2、层次化的企业架构</p><p>当公司对网络的要求比较高时，会选择层次化的企业架构</p><p>层次：</p><p>​（1）终端：通信的发起或接收的设备，PC、IP电话、平板、服务器等</p><p>​（2）接入层：将终端的设备连接到网络中（在此层扩展）</p><p>​（3）汇聚层（非必要）：将接入层的流量汇聚起来，方便做流量控制</p><p>​（4）核心层：负责数据的高速转发、对设备性能要求高。</p><p>优点：</p><p>​（1）可靠性好：多台设备、多条链路，导致冗余性很好，终端可以通过多条链路收发数据</p><p>​（2）方便排障：因为网络有分层，所以可以做到故障的分层排查</p><p>​（3）扩展性好：如果要增加终端的接入，可以在接入层多加一台交换机</p><p>缺点：成本高、架构复杂、需要专员进行网络的维护</p><h4 id="三、网络的组成和结构"><a href="#三、网络的组成和结构" class="headerlink" title="三、网络的组成和结构"></a>三、网络的组成和结构</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20240910203307373.png"></p><p>终端设备：PC ipad iphone ATM提款机 公交卡收费端 汽车导航</p><p>网络互联设备：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">集线器（HUB）：所有接口在一个冲突域<br>交换机：每个接口一个冲突域，所有接口默认都在一个广播域（网段）<br>路由器：每个接口一个广播域（隔离广播域），可以实现不同网络间通信<br>防火墙：对内部网络进行保护的设备<br>IDS：入侵检测<br>IPS：入侵防御<br><span class="hljs-keyword">AP</span>：无线接入（fat <span class="hljs-keyword">AP</span>   <span class="hljs-keyword">fit</span> <span class="hljs-keyword">AP</span>（必须由<span class="hljs-keyword">AC</span>来管理））<br>ICG<br>基站<br></code></pre></td></tr></table></figure><p>用于连接设备的链路&#x2F;介质：同轴电缆，双绞线，光纤，无线</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">计算机网络的最终目的是实现资源的共享<br></code></pre></td></tr></table></figure><h3 id="OSI开放系统互连参考模型"><a href="#OSI开放系统互连参考模型" class="headerlink" title="OSI开放系统互连参考模型"></a>OSI开放系统互连参考模型</h3><p>OSI开放系统互连参考模型，是由ISO国际标准化组织定义的，是模型不是协议，常用来分析和设计网络体系结构。</p><p>OSI模型的目的：规范不同系统的互连标准，使两个不同的系统能够较容易的通信而不需要改变低层的硬件或软件的逻辑。</p><p>OSI七层：物理层 数据链路层 网络层 传输层 会话层 表示层 应用层</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps1.jpg"></p><p>OSI的优点：</p><p>将网络的通信过程划分为小一些、简单一些的部件，因此有助于各个部件的开发、设计和故障排除</p><p>通过网络组件的标准化，允许多个供应商进行开发</p><p>通过定义在模型的每一层实现什么功能，鼓励产业的标准化</p><p>允许各种类型的网络硬件和软件相互通信</p><p>防止对某一层所做的改动影响到其他的层，这样就有利于开发</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250224201134851.png"></p><h3 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP&#x2F;IP协议栈"></a>TCP&#x2F;IP协议栈</h3><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps4.jpg"></p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps3.jpg"></p><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><h4 id="一、物理层的功能"><a href="#一、物理层的功能" class="headerlink" title="一、物理层的功能"></a>一、物理层的功能</h4><p>规定介质类型、接口类型、信令类型 </p><p>规范在终端系统之间激活、维护和关闭物理链路的电气、 机械、流程和功能等方面的要求 </p><p>规范电平、数据速率、最大传输距离和物理接头等特征</p><p>物理层介质和物理层设备</p><h4 id="二、物理层传输介质"><a href="#二、物理层传输介质" class="headerlink" title="二、物理层传输介质"></a>二、物理层传输介质</h4><h5 id="1-简单网络"><a href="#1-简单网络" class="headerlink" title="1.简单网络"></a>1.简单网络</h5><p>两个终端，用一条能承载数据传输的物理介质（也称为传输介质）连接起来，就组成了一个最简单的网络</p><h5 id="2-同轴电缆"><a href="#2-同轴电缆" class="headerlink" title="2.同轴电缆"></a>2.同轴电缆</h5><table><thead><tr><th>以太网标准</th><th>电缆类别</th><th>最长有效传输距离</th></tr></thead><tbody><tr><td>10BASE5</td><td>粗同轴电缆</td><td>500米</td></tr><tr><td>10BASE2</td><td>细同轴电缆</td><td>185米</td></tr></tbody></table><p>同轴电缆是一种早期使用的传输介质，同轴电缆的标准分为两种，10BASE2和10BASE5。这两种标准都支持10Mbps的传输速率，最长传输距离分别为185米和500米。</p><h5 id="3-双绞线"><a href="#3-双绞线" class="headerlink" title="3.双绞线"></a>3.双绞线</h5><p>与同轴电缆相比双绞线（Twisted Pair）具有更低的制造和部署成本，因此在企业网络中被广泛应用。双绞线可分为<strong>屏蔽双绞线</strong>(Shielded Twisted Pair，STP)和<strong>非屏蔽双绞线</strong>(Unshielded Twisted Pair，UTP)。屏蔽双绞线在双绞线与外层绝缘封套之间有一个金属屏蔽层，可以屏蔽电磁干扰。</p><p>双绞线有很多种类型，不同类型的双绞线所支持的传输速率一般也不相同。例如，3类双绞线支持10Mbps传输速率；5类双绞线支持100Mbps传输速率；超5类双绞线及更高级别的双绞线支持千兆以太网传输。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">直通线：两端线序一致，连接接不同设备（交换机</span><span class="hljs-literal">--</span><span class="hljs-comment">PC、交换机</span><span class="hljs-literal">--</span><span class="hljs-comment">路由器）</span><br><span class="hljs-comment">交叉线：T568A</span><span class="hljs-literal">---</span><span class="hljs-comment">T568B，连接接同种设备（交换机</span><span class="hljs-literal">--</span><span class="hljs-comment">交换机，PC</span><span class="hljs-literal">--</span><span class="hljs-comment">路由器）</span><br><span class="hljs-comment">全反线：两端线序完全相反，一般用于设备的配置线</span><br><span class="hljs-comment">T568A: 绿白、绿、橙白、蓝、蓝白、橙、棕白、棕</span>  <br><span class="hljs-comment">T568B: 橙白、橙、绿白、蓝、蓝白、绿、棕白、棕</span><br><span class="hljs-comment">网络水晶头：RJ45</span><br><span class="hljs-comment">语音水晶头：RJ11</span><br><span class="hljs-comment">屏蔽双绞线(Shielded Twisted Pair，STP)</span><br><span class="hljs-comment">非屏蔽双绞线(Unshielded Twisted Pair，UTP)。</span><br></code></pre></td></tr></table></figure><h5 id="4-光纤"><a href="#4-光纤" class="headerlink" title="4.光纤"></a>4.光纤</h5><p>双绞线和同轴电缆传输数据时使用的是电信号，而光纤传输数据时使用的是光信号。光纤支持的传输速率包括10Mbps，100Mbps，1Gbps，10Gbps，甚至更高。</p><p>根据光纤传输光信号模式的不同，光纤又可分为单模光纤和多模光纤。单模光纤只能传输一种模式的光，不存在模间色散，因此适用于长距离高速传输。多模光纤允许不同模式的光在一根光纤上传输，由于模间色散较大而导致信号脉冲展宽严重，因此多模光纤主要用于局域网中的短距离传输。</p><h5 id="5-串口电缆"><a href="#5-串口电缆" class="headerlink" title="5.串口电缆"></a>5.串口电缆</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250224142432372.png"></p><h4 id="三、物理层设备"><a href="#三、物理层设备" class="headerlink" title="三、物理层设备"></a>三、物理层设备</h4><p>中继器、集线器</p><h4 id="四、双工模式"><a href="#四、双工模式" class="headerlink" title="四、双工模式"></a>四、双工模式</h4><p>半双工模式：通信双方都能发送和接收数据，但不能同时进行。（对讲机）</p><p>全双工模式：通信双方都能同时接收和发送数据。（电话网络）</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">以太网上的通信模式包括半双工和全双工两种：<br>半双工模式下，共享物理介质的通信双方必须采用CSMA/<span class="hljs-built_in">CD</span>机制来避免冲突。<br></code></pre></td></tr></table></figure><h5 id="1-冲突域"><a href="#1-冲突域" class="headerlink" title="1.冲突域"></a>1.冲突域</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250224161239604.png"></p><p>共享式网络中可能会出现信号冲突现象。解决方法：CSMA&#x2F;CD机制</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">共享式网络中，不同的主机同时发送数据时，就会产生信号冲突的问题，解决这一问题的方法一般是采用载波侦听多路访问/冲突检测技术。<br></code></pre></td></tr></table></figure><h5 id="2-CSMA-CD机制"><a href="#2-CSMA-CD机制" class="headerlink" title="2.CSMA&#x2F;CD机制"></a>2.CSMA&#x2F;CD机制</h5><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">CSMA/<span class="hljs-built_in">CD</span>机制是一种在共享式网络上检测并避免冲突的机制<br></code></pre></td></tr></table></figure><p>CSMA&#x2F;CD的基本工作过程如下：</p><p>终端设备不停地检测共享线路的状态。如果线路空闲，则可以发送数据；如果线路不空闲，则等待一段时间后继续检测（延时时间由退避算法决定）。<br>如果有另外一个设备同时发送数据，两个设备发送的数据会产生冲突。<br>终端设备检测到冲突之后，会马上停止发送自己的数据，并发送特殊阻塞信息，以强化冲突信号，使线路上其他站点能够尽早检测到冲突。<br>终端设备检测到冲突后，等待一段时间之后再进行数据发送（延时时间由退避算法决定）。<br>CSMA&#x2F;CD的工作原理可简单总结为：先听后发，边发边听，冲突停发，随机延迟后重发。</p><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><h4 id="一、数据链路层的功能"><a href="#一、数据链路层的功能" class="headerlink" title="一、数据链路层的功能"></a>一、数据链路层的功能</h4><p>控制网络层与数据链路层的通信，数据成帧，通过MAC地址寻址。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps5.jpg"></p><p>LLC Sub-layer：Logic Link Control Sub-layer逻辑链路控制子层，识别协议类型并对数据进行封装通过网络进行传输</p><p>MAC Sub-layer ：Media Access Control Sub-Layer 介质访问控制子层，指定数据如何通过物理线路进行传输，并与物理层通信 </p><h4 id="二、数据链路层协议"><a href="#二、数据链路层协议" class="headerlink" title="二、数据链路层协议"></a>二、数据链路层协议</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps6.jpg"></p><h4 id="三、数据链路层设备"><a href="#三、数据链路层设备" class="headerlink" title="三、数据链路层设备"></a>三、数据链路层设备</h4><p>以太网交换机</p><h4 id="四、网络通信协议模型"><a href="#四、网络通信协议模型" class="headerlink" title="四、网络通信协议模型"></a>四、网络通信协议模型</h4><p>网络通信中，协议和标准这两个词汇常常可以混用。一般地，关注于逻辑数据关系的协议通常被称为上层协议，而关注于物理数据流的协议通常被称为低层协议。</p><p>IEEE 802就是一套用来管理物理数据流在局域网中传输的标准，包括在局域网中传输物理数据的802.3以太网标准，还有一些用来管理物理数据路在使用串行介质的广域网中传输的标准，比如帧中继FR，高级数据链路控制HDLC，异步传输模式ATM。</p><h4 id="五、数据封装"><a href="#五、数据封装" class="headerlink" title="五、数据封装"></a>五、数据封装</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250224203942932.png"></p><p>应用数据需要经过TCP&#x2F;IP每一层处理之后才能通过网络传输到目的端，每一层上都使用该层的协议数据单元PDU彼此交换信息。</p><p>上层数据在传输层添加TCP报头后得到的PDU被称为Segment（数据段）；数据段被传递给网络层，网络层添加IP报头得到的PDU被称为Packet（数据包）；数据包被传递到数据链路层，封装数据链路层报头得到的PDU被称为Frame（数据帧）；最后，帧被转换为比特，通过网络介质传输。这种协议栈逐层向下传递数据，并添加报头和报尾的过程称为封装。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250224204520471.png"></p><p>数据传输过程</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250224204546879.png"></p><p>数据包在以太网物理介质上传播之前必须封装头部和尾部信息，封装后的数据包称为数据帧，数据帧中封装的信息决定了数据如何传输。以太网上传输的数据帧有两种格式，选择哪种格式由TCP&#x2F;IP协议簇中的网络层决定。</p><h4 id="六、数据帧格式"><a href="#六、数据帧格式" class="headerlink" title="六、数据帧格式"></a>六、数据帧格式</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps7.jpg"></p><p>以太网上使用两种标准帧格式。第一种是上世纪80年代初提出的DIX v2格式，即Ethernet II帧格式。Ethernet II后来被IEEE 802标准接纳，并写进了IEEE 802.3x-1997的3.2.6节。第二种是1983年提出的IEEE 802.3格式。这两种格式的主要区别在于Ethernet II格式中包含一个Type字段，标识以太帧处理完成之后将被发送到哪个上层协议进行处理，IEEE 802.3格式中，同样的位置是长度字段。</p><p>不同的Type字段值可以用来区别这两种帧的类型，当Type字段值小于等于1500（或者十六进制的0x05DC）时，帧使用的是IEEE 802.3格式。当Type字段值大于等于1536 （或者十六进制的0x0600）时，帧使用的是Ethernet II格式。以太网中大多数的数据帧使用的是Ethernet II格式。</p><p>以太帧中还包括源和目的MAC地址，分别代表发送者的MAC和接收者的MAC，此外还有帧校验序列字段，用于检验传输过程中帧的完整性。</p><h4 id="七、Ethernet-II帧格式"><a href="#七、Ethernet-II帧格式" class="headerlink" title="七、Ethernet_II帧格式"></a>七、Ethernet_II帧格式</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250224210938153.png"></p><p>Ethernet_II 帧类型值大于等于1536 (0x0600)。</p><p>以太网数据帧的长度在64-1518字节之间。</p><p>Type字段的作用即用来表明上层使用的协议。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">Ethernet_II的帧中各字段说明如下：<br>DMAC（Destination <span class="hljs-keyword">MAC</span>）是目的<span class="hljs-keyword">MAC</span>地址。DMAC字段长度为6个字节，标识帧的接收者。<br>SMAC（Source <span class="hljs-keyword">MAC</span>）是源<span class="hljs-keyword">MAC</span>地址。SMAC字段长度为6个字节，标识帧的发送者。<br>类型字段（<span class="hljs-keyword">Type</span>）用于标识数据字段中包含的高层协议，该字段长度为2个字节。类型字段取值为0x0800的帧代表IP协议帧；类型字段取值为0x0806的帧代表ARP协议帧。<br>数据字段（Data）是网络层数据，最小长度必须为46字节以保证帧长至少为64字节，数据字段的最大长度为1500字节。<br>循环冗余校验字段（FCS）提供了一种错误检测机制。该字段长度为4个字节。<br></code></pre></td></tr></table></figure><h4 id="八、数据帧传输"><a href="#八、数据帧传输" class="headerlink" title="八、数据帧传输"></a>八、数据帧传输</h4><p>数据链路层基于MAC地址进行帧的传输。</p><p>以太网在二层链路上通过MAC地址来唯一标识网络设备，并且实现局域网上网络设备之间的通信。MAC地址也叫物理地址，大多数网卡厂商把MAC地址烧入了网卡的ROM中。发送端使用接收端的MAC地址作为目的地址。以太帧封装完成后会通过物理层转换成比特流在物理介质上传输。</p><h4 id="九、以太网的MAC地址"><a href="#九、以太网的MAC地址" class="headerlink" title="九、以太网的MAC地址"></a>九、以太网的MAC地址</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250226202830818.png"></p><p>MAC地址由两部分组成，分别是供应商代码和序列号。其中前24位代表该供应商代码，由IEEE管理和分配。剩下的24位序列号由厂商自己分配。</p><p>如同每一个人都有一个名字一样，每一台网络设备都用物理地址来标识自己，这个地址就是MAC地址。网络设备的MAC地址是全球唯一的。MAC地址长度为48比特，通常用十六进制表示。MAC地址包含两部分：前24比特是组织唯一标识符（OUI，Organizationally Unique Identifier），由IEEE统一分配给设备制造商。例如，华为的网络产品的MAC地址前24比特是0x00e0fc。后24位序列号是厂商分配给每个产品的唯一数值，由各个厂商自行分配（这里所说的产品可以是网卡或者其他需要MAC地址的设备）。</p><p>MAC地址的工作范围只在链路层面上，在一个LAN里面。</p><h4 id="十、网络通信"><a href="#十、网络通信" class="headerlink" title="十、网络通信"></a>十、网络通信</h4><h5 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h5><p>局域网上的帧可以通过三种方式发送。第一种是单播，指从单一的源端发送到单一的目的端。每个主机接口由一个MAC地址唯一标识，MAC地址的OUI中，第一字节第8个比特表示地址类型。对于主机MAC地址，这个比特固定为0，表示目的MAC地址为此MAC地址的帧都是发送到某个唯一的目的端。在冲突域中，所有主机都能收到源主机发送的单播帧，但是其他主机发现目的地址与本地MAC地址不一致后会丢弃收到的帧，只有真正的目的主机才会接收并处理收到的帧。</p><h5 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h5><p>第二种发送方式是广播，表示帧从单一的源发送到共享以太网上的所有主机。广播帧的目的MAC地址为十六进制的FF:FF:FF:FF:FF:FF，所有收到该广播帧的主机都要接收并处理这个帧。<br>广播方式会产生大量流量，导致带宽利用率降低，进而影响整个网络的性能。当需要网络中的所有主机都能接收到相同的信息并进行处理的情况下，通常会使用广播方式。</p><h5 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h5><p>第三种发送方式为组播，组播比广播更加高效。组播转发可以理解为选择性的广播，主机侦听特定组播地址，接收并处理目的MAC地址为该组播MAC地址的帧。<br>组播MAC地址和单播MAC地址是通过第一字节中的第8个比特区分的。组播MAC地址的第8个比特为1，而单播MAC地址的第8个比特为0。<br>当需要网络上的一组主机（而不是全部主机）接收相同信息，并且其他主机不受影响的情况下通常会使用组播方式。</p><h4 id="十一、数据帧的发送和接收"><a href="#十一、数据帧的发送和接收" class="headerlink" title="十一、数据帧的发送和接收"></a>十一、数据帧的发送和接收</h4><p>帧从主机的物理接口发送出来后，通过传输介质传输到目的端。共享网络中，这个帧可能到达多个主机。</p><p>主机检查帧头中的目的MAC地址，如果目的MAC地址不是本机MAC地址，也不是本机侦听的组播或广播MAC地址，则主机会丢弃收到的帧。如果目的MAC地址是本机MAC地址，则接收该帧，检查帧校验序列（FCS）字段，并与本机计算的值对比来确定帧在传输过程中是否保持了完整性。如果帧的FCS值与本机计算的值不同，主机会认为帧已被破坏，并会丢弃该帧。如果该帧通过了FCS校验，则主机会根据帧头部中的Type字段来确定将帧发送给上层哪个协议处理。</p><p>交换机通过MAC地址来寻址。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps8.jpg"></p><p>（1）PC1: ping 192.168.1.2   </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ARP:</span>地址解析协议，将<span class="hljs-built_in">IP</span>地址解析成MAC地址的协议<br></code></pre></td></tr></table></figure><p>（2）检查ARP缓存表：是否有192.168.1.2的记录，如果有则单播。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ARP</span>缓存表：默认是空的<span class="hljs-built_in">PC</span>&gt;arp -a 查看缓存表<br></code></pre></td></tr></table></figure><p>如果没有则发送一个广播消息：</p><p>​我是192.168.1.1 我的MAC是：54-89-98-08-5F-BD</p><p>​    请问192.168.1.2的MAC地址是多少？</p><p>（3）交换机：</p><p>交换机有一张表叫MAC地址缓存表，默认也是空的。</p><p><Huawei>display mac-address  查看缓存表信息</p><p>收到PC1的广播信息后，如何处理呢？</p><p>首先：学习PC1的MAC地址，并将MAC和连接的端口记录到MAC缓存表。</p><p>然后：检查MAC地址表是否有到达目标MAC的记录？</p><p>有：则单播，无：则广播（MAC泛洪）   </p><p>（4）</p><p>PC3：收到消息后，检查数据帧中的目的IP是不是自己的,不是则丢弃</p><p>PC2：收到消息后，检查数据帧中的目的IP是不是自己的，</p><p>​刚好是自己的，所以要回复：（先学习PC1的MAC并添加到ARP缓存表中，然后再回复）：</p><p>​    我是192.168.1.2 我的MAC地址是：54-89-98-31-61-EB</p><p>​    发给192.168.1.1 对应的MAC地址是：54-89-98-08-5F-BD</p><p>（5）</p><p>交换机：收到PC2的回复后，先学习PC2的MAC地址，将PC2的MAC与连接的端口对应关系添加到MAC地址表中。然后检查MAC表中是否有PC1的MAC记录。有则单播。</p><p>（6）</p><p>PC1：收到回复后，记录PC2的MAC地址到ARP缓存表中，然后开始单播通信。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">ARP</span>缓存表和<span class="hljs-variable constant_">MAC</span>地址表老化时间：<span class="hljs-number">300</span>秒左右（一般是<span class="hljs-number">5</span>-<span class="hljs-number">10</span>分钟）<br><br>广播帧的目的<span class="hljs-variable constant_">MAC</span>地址为十六进制的：<span class="hljs-variable constant_">FF</span><span class="hljs-symbol">:FF</span><span class="hljs-symbol">:FF</span><span class="hljs-symbol">:FF</span><span class="hljs-symbol">:FF</span><span class="hljs-symbol">:FF</span><br><br>组播目的<span class="hljs-variable constant_">MAC</span>地址的第一字节第<span class="hljs-number">8</span>个比特为<span class="hljs-number">1</span><br><br>而单播目的<span class="hljs-variable constant_">MAC</span>地址的第一字节第<span class="hljs-number">8</span>个比特为<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="十二、上层协议类型"><a href="#十二、上层协议类型" class="headerlink" title="十二、上层协议类型"></a>十二、上层协议类型</h4><p>在剥掉帧的头部和尾部之前，网络设备需要根据帧头中Type字段确定下一步将帧发送到哪个上层协议进行处理。</p><p>类型字段取值为0x0800的帧代表IP协议帧；类型字段取值为0x0806的帧代表ARP协议帧。</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><h4 id="一、网络层功能与设备"><a href="#一、网络层功能与设备" class="headerlink" title="一、网络层功能与设备"></a>一、网络层功能与设备</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps9.jpg"></p><h4 id="二、网络层协议"><a href="#二、网络层协议" class="headerlink" title="二、网络层协议"></a>二、网络层协议</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps10.jpg"></p><h4 id="三、IP协议"><a href="#三、IP协议" class="headerlink" title="三、IP协议"></a>三、IP协议</h4><h5 id="1-IP编址"><a href="#1-IP编址" class="headerlink" title="1.IP编址"></a>1.IP编址</h5><p>IPV4地址由32位二进制数组成，这些位被划分为4个字节，中间用“.”号隔开，每组8位，以十进制数形式表示。分为<strong>网络地址</strong>和<strong>主机地址</strong>两个部分。</p><p>IP地址：192.168.1.1  子网掩码：255.255.255.0</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250225170714129.png"></p><p>通过子网掩码来判断哪一部份是网络位，哪一部份是主机位。全1的部份是网络位，全0的部份是主机位。</p><p>网络号：192.168.1.0   当前网络的第一个地址，不能配置给主机</p><p>广播号：192.168.1.255  当前网络的最后一个地址，不能配置给主机</p><p>可用地址范围：192.168.1.1–192.168.1.254</p><h5 id="2-IP数据包格式"><a href="#2-IP数据包格式" class="headerlink" title="2.IP数据包格式"></a>2.IP数据包格式</h5><h6 id="（1）IP报文头部"><a href="#（1）IP报文头部" class="headerlink" title="（1）IP报文头部"></a>（1）IP报文头部</h6><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250225165157241.png"></p><p>IP报文头部信息用于指导网络设备对报文进行路由和分片。同一个网段内的数据转发通过链路层即可实现，而跨网段的数据转发需要使用网络设备的路由功能。</p><p>分片是指数据包超过一定长度时，需要被划分成不同的片段使其能够在网络中传输。</p><p>IP报文头部长度为20到60字节，报文头中的信息可以用来指导网络设备如何将报文从源设备发送到目的设备。其中，版本字段表示当前支持的IP协议版本，当前的版本号为4。DS字段早期用来表示业务类型，现在用于支持QoS中的差分服务模型，实现网络流量优化。源和目的IP地址是分配给主机的逻辑地址，用于在网络层标识报文的发送方和接收方。根据源和目的IP地址可以判断目的端是否与发送端位于同一网段，如果二者不在同一网段，则需要采用路由机制进行跨网段转发。</p><h6 id="（2）IP包分片"><a href="#（2）IP包分片" class="headerlink" title="（2）IP包分片"></a>（2）IP包分片</h6><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250225170112200.png"></p><p>标识符字段（identification）用于识别属于同一个数据包的分片，以区别于同一主机或其他主机发送的其它数据包分片，保证分片被正确的重新组合。</p><p>标志字段（flags）用于判断是否已经收到最后一个分片（最后一个为0、其他为1）</p><p>片偏移字段（fragment offset）表示每个分片在原始报文中的位置</p><h6 id="（3）生存时间TTL"><a href="#（3）生存时间TTL" class="headerlink" title="（3）生存时间TTL"></a>（3）生存时间TTL</h6><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250227165112777.png"></p><p>TTL值主要是用于避免环路导致的网络拥塞、初始TTL值由源端设备设置（访问127地址可查看）。</p><p>报文每经过一台三层设备，TTL值减1。当报文中的TTL降为0时，报文会被丢弃。</p><h6 id="（4）协议号"><a href="#（4）协议号" class="headerlink" title="（4）协议号"></a>（4）协议号</h6><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250227165155368.png"></p><p>Protocol表明上层使用的协议<br>TCP（Transmission Control Protocol，传输控制协议，对应值0x06）6<br>UDP（User Datagram Protocol，用户数据包协议，对应值0x11）17</p><h5 id="3-IP地址分类"><a href="#3-IP地址分类" class="headerlink" title="3.IP地址分类"></a>3.IP地址分类</h5><h6 id="A类网络地址范围（0开头）"><a href="#A类网络地址范围（0开头）" class="headerlink" title="A类网络地址范围（0开头）"></a>A类网络地址范围（0开头）</h6><p>第一个字节的第一位必须为0，第一个字节的取值为0-127。即：0xxxxxxx   取值范围是：<em><strong>0</strong></em>0000000－<strong>0</strong>1111111（0－127）</p><p>A类地址的子网掩码是：255.0.0.0，也就第一个字节是网络位，后3个字节为主机位。</p><p><strong>举例：</strong>1.1.1.1  255.0.0.0 </p><p>网络号（标识地址具体在哪个网络）：1.0.0.0</p><p>广播地址：1.255.255.255</p><p>在这网络中有多少个地址呢？224</p><p>有效地址（可以配置给主机的地址）：224-2</p><p>可用地址范围：1.0.0.1–1.255.255.254</p><h6 id="B类网络地址转换（10开头）"><a href="#B类网络地址转换（10开头）" class="headerlink" title="B类网络地址转换（10开头）"></a>B类网络地址转换（10开头）</h6><p>第一个字节的第一位必须是1，且第二位必须是0，第一个字节的取值为<strong>128－191</strong>。即：<strong>1</strong>0000000  取值范围是：<strong>10</strong>000000－<strong>10</strong>111111（128－191）</p><p>B类地址的子网掩码是：255.255.0.0，也就前两个字节是网络位，后2个字节为主机位。</p><p>举例：181.1.1.1  255.255.0.0</p><p>网络地址：181.1.0.0</p><p>广播地址：181.1.255.255</p><p>有效地址：216-2  </p><p>可用地址范围：181.1.0.1—-181.1.255.254</p><h6 id="C类网络地址转换（110开头）"><a href="#C类网络地址转换（110开头）" class="headerlink" title="C类网络地址转换（110开头）"></a>C类网络地址转换（110开头）</h6><p>第一个字节的前两位必须是1，且第三位必须是0，第一个字节的取值为<strong>192－223</strong>。即：<strong>110</strong>00000  取值范围是：<strong>110</strong>00000－11011111（192－223）</p><p>C类地址的子网掩码是：255.255.255.0，也就前三个字节是网络位，最后1个字节为主机位。</p><p>举例：192.168.1.1  255.255.255.0</p><p>网络地址：192.168.1.0  </p><p>广播地址：192.168.1.255</p><p>有效地址：28-2  </p><p>有效地址范围：192.168.1.1–192.168.1.254</p><h6 id="D类网络的地址范围"><a href="#D类网络的地址范围" class="headerlink" title="D类网络的地址范围"></a>D类网络的地址范围</h6><p>第一个字节为224–239，用作组播地址。</p><h6 id="E类网络的地址范围"><a href="#E类网络的地址范围" class="headerlink" title="E类网络的地址范围"></a>E类网络的地址范围</h6><p>第一个字节为240–255，用于科学用途。</p><h6 id="私有IP地址范围"><a href="#私有IP地址范围" class="headerlink" title="私有IP地址范围"></a>私有IP地址范围</h6><p>在公网中是不能路由的，必须经过地址转换。</p><p>A类　10.0.0.0~10.255.255.255</p><p>B类    172.16.0.0~172.31.255.255</p><p>C类    192.168.0.0~192.168.255.255</p><h6 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h6><p>环回地址：127.0.0.0~127.255.255.255，用于诊断网络是否正常。</p><p>任何网络：0.0.0.0</p><p>广播地址255.255.255.255</p><h5 id="4-子网划分"><a href="#4-子网划分" class="headerlink" title="4.子网划分"></a>4.子网划分</h5><p>子网划分的核心思想：“借用”主机位 来“制造”新的“网络”</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">引入：<br><span class="hljs-number">10.1.1.1</span> <span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">8</span><br><span class="hljs-number">172.16.1.1</span> <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">16</span><br><span class="hljs-number">192.168.1.1</span> <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span><br>C类地址的子网划分：<br>怎么划分呢？向主机位借位，借了几位就表示该网络被划分成了<span class="hljs-number">2</span>的几次方个网络。<br></code></pre></td></tr></table></figure><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-number">1.</span>你所选择的子网掩码将会产生多少个子网?<br><span class="hljs-number">2</span>的<span class="hljs-variable language_">x</span>次方（<span class="hljs-variable language_">x</span>：子网位数）<br><span class="hljs-number">2.</span>每个子网能有多少主机?<br><span class="hljs-number">2</span>的<span class="hljs-variable language_">y</span>次方<span class="hljs-number">-2</span>（<span class="hljs-variable language_">y</span>：主机位数）<br><span class="hljs-number">3.</span>有效子网（块大小）?<br>块大小=<span class="hljs-number">2</span>的<span class="hljs-variable language_">y</span>次方（<span class="hljs-variable language_">y</span>：主机位数）<br>(结果叫做block size 或base number)<br><span class="hljs-number">4.</span>每个子网的广播地址是?<br>主机位全为<span class="hljs-number">1</span>。（广播地址=下个子网号<span class="hljs-number">-1</span>）<br><span class="hljs-number">5.</span>每个子网的有效主机分别是?<br>忽略子网内全为<span class="hljs-number">0</span>和全为<span class="hljs-number">1</span>的地址，剩下的就是有效主机地址。<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">举例：<span class="hljs-number">192.168.1.0</span>  <span class="hljs-number">255.255.255.0</span> <br><span class="hljs-number">11111111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">10000000</span><br>向主机位借了<span class="hljs-number">1</span>位，所以该网络被划分成了<span class="hljs-number">21</span>=<span class="hljs-number">2</span>个网络。<br>子网掩码值：<span class="hljs-number">255.255.255.128</span><br>块大小：<span class="hljs-number">256-128=128</span><br>分成了哪<span class="hljs-number">2</span>个网络呢？<br>网络号：<span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">25</span><br>广播号：<span class="hljs-number">192.168.1.127</span><br>可用地址：<span class="hljs-number">192.168.1.1</span>-<span class="hljs-number">192.168.1.126</span><br>网络号：<span class="hljs-number">192.168.1.128</span>/<span class="hljs-number">25</span><br>广播号：<span class="hljs-number">192.168.1.255</span><br>可用地址：<span class="hljs-number">192.168.1.129</span>-<span class="hljs-number">192.168.1.254</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dns">计算：<span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span>    向主机位借<span class="hljs-number">4</span>位     <br><span class="hljs-number">11110000</span>  <span class="hljs-number">128+64+32+16</span> +<span class="hljs-number">0+0+0+0</span>=<span class="hljs-number">240</span><br>子网掩码：<span class="hljs-number">255.255.255.240</span> /<span class="hljs-number">28</span><br>块大小：<span class="hljs-number">256-240=16</span><br>划分了几个网络：<span class="hljs-number">2</span>^<span class="hljs-number">4</span>=<span class="hljs-number">16</span><br><span class="hljs-number">0</span>   <span class="hljs-number">16</span>   <span class="hljs-number">32</span>   <span class="hljs-number">48</span>   <span class="hljs-number">64</span>   <span class="hljs-number">80</span>   ...... <br>问题：被分成了几个网络？  <span class="hljs-number">192.168.1.73</span>在哪个网络？<br>答：<span class="hljs-number">16</span>个网络，<span class="hljs-number">192.168.1.64</span>/<span class="hljs-number">28</span><br>网络号：<span class="hljs-number">192.168.1.64</span>/<span class="hljs-number">28</span><br>广播号：<span class="hljs-number">192.168.1.79</span><br>可用地址：<span class="hljs-number">192.168.1.65</span>--<span class="hljs-number">192.168.1.78</span><br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">B类地址的子网划分：<br><span class="hljs-number">172.16.1.1</span>/<span class="hljs-number">16</span>    <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>     向主机位借<span class="hljs-number">12</span>位<br>借位后的子网掩码：<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">240</span>  <span class="hljs-number">1111</span> <span class="hljs-number">0000</span>   <span class="hljs-number">128</span>+<span class="hljs-number">64</span>+<span class="hljs-number">32</span>+<span class="hljs-number">16</span><br>块大小： <span class="hljs-number">256</span>-<span class="hljs-number">240</span>=<span class="hljs-number">16</span><br>有哪些网络呢？/<span class="hljs-number">28</span><br><span class="hljs-number">172.16.0.0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">16</span>  <span class="hljs-number">0</span>.<span class="hljs-number">32</span>  <span class="hljs-number">0</span>.<span class="hljs-number">48</span> .......<br><span class="hljs-number">172.16.1.0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">64</span>  <span class="hljs-number">1</span>.<span class="hljs-number">128</span>  <span class="hljs-number">1</span>.<span class="hljs-number">192</span><br>......<br><span class="hljs-number">172.16.255.0</span>  <span class="hljs-number">255</span>.<span class="hljs-number">64</span>  <span class="hljs-number">255</span>.<span class="hljs-number">128</span>  <span class="hljs-number">255</span>.<span class="hljs-number">192</span><br></code></pre></td></tr></table></figure><h6 id="1-子网掩码"><a href="#1-子网掩码" class="headerlink" title="1.子网掩码"></a>1.子网掩码</h6><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250225195414790.png"></p><h6 id="2-默认子网掩码"><a href="#2-默认子网掩码" class="headerlink" title="2.默认子网掩码"></a>2.默认子网掩码</h6><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250225195438498.png"></p><h6 id="3-有类路由"><a href="#3-有类路由" class="headerlink" title="3.有类路由"></a>3.有类路由</h6><p>有类路由选择：RIP1  IGRP协议</p><p>汇总以后地址是标准的A B C类地址掩码 即 255.0.0.0 255.255.0.0 255.255.255.0 (<a href="https://www.baidu.com/s?wd=%E6%9C%89%E7%B1%BB%E8%B7%AF%E7%94%B1&from=1012015a&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Y3rHTzm1c3uW6zuhmdm1bz0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnWRsnHn1nWnd">有类路由</a>里 大类网络中 子网码必须一致 这样叫做有类路由 因为有类路由协议不传递子网码信息)</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps11.jpg"></p><p>有类IP编址的缺陷：在设计网络时使用有类IP地址会造成地址的浪费。</p><h6 id="4-无类路由"><a href="#4-无类路由" class="headerlink" title="4.无类路由"></a>4.无类路由</h6><p>无类路由选择：RIP2、EIGRP、OSPF等协议</p><p>汇总以后地址是无类的比如 172.16.12.0&#x2F;16 - 172.16.15.0&#x2F;16 汇总以后的地址是 172.16.12.0&#x2F;20 子码 不属于 A B C 3个类别(无类路由是相反的 他传递子网信息所有大类网络中可以使用不同的子网码)</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps12.jpg"></p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps13.jpg"></p><p><strong>4.1.变长子网掩码VLSM</strong></p><p>VLSM：可变长子网掩码（借用主机位）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">变长子网掩码(Variable-Length Subnet Masks,VLSM)的出现是打破传统的以类(<span class="hljs-keyword">class</span>)为标准的地址划分方法，是为了缓解<span class="hljs-symbol">IP</span>地址紧缺而产生的；<br>作用：节约<span class="hljs-symbol">IP</span>地址空间<br>注意事项：使用<span class="hljs-symbol">VLSM</span>时,所采用的路由协议必须能够支持它,这些路由协议包括<span class="hljs-symbol">RIPv2,<span class="hljs-symbol">OSPF</span>,<span class="hljs-symbol">EIGRP</span></span>和<span class="hljs-symbol">BGP</span>；<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用长度不同的子网掩码将网络划分成多个子网，适用于不同类型的网络设计，称为VLSM组网。<br></code></pre></td></tr></table></figure><p><strong>4.2.无类域间路由CIDR</strong></p><p>CIDR的概念：忽略A、B、C类网络的规则，定义前缀相同的一组网络为一个块，即一条路由条目。（如：199.0.0.0&#x2F;8）</p><p>CIDR的优点：<br>    减少了网络数目，缩小了路由选择表；<br>    从网络流量、CPU和内存方面说，开销更低；<br>    对网络进行编址时，灵活性更大；<br>    CIDR 增强了网络的可扩展性。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250225202723690.png"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">无类域间路由CIDR（Classless Inter Domain Routing）由RFC1817定义。CIDR突破了传统IP地址的分类边界，将路由表中的若干条路由汇聚为一条路由，减少了路由表的规模，提高了路由器的可扩展性。<br>如上图所示，一个企业分配到了一段<span class="hljs-keyword">A</span>类网络地址，<span class="hljs-number">10.24.0.0</span>/<span class="hljs-number">22</span>。该企业准备把这些<span class="hljs-keyword">A</span>类网络分配给各个用户群，目前已经分配了四个网段给用户。如果没有实施CIDR技术，企业路由器的路由表中会有四条下连网段的路由条目，并且会把它通告给其他路由器。通过实施CIDR技术，我们可以在企业的路由器上把这四条路由<span class="hljs-number">10.24.0.0</span>/<span class="hljs-number">24，10.24.1</span>.<span class="hljs-number">0/24，10.24</span>.<span class="hljs-number">2.0/24，10</span>.<span class="hljs-number">24.3.0/24</span>汇聚成一条路由<span class="hljs-number">10.24.0.0</span>/<span class="hljs-number">22</span>。这样，企业路由器只需通告<span class="hljs-number">10.24.0.0</span>/<span class="hljs-number">22</span>这一条路由，大大减小了路由表的规模。<br></code></pre></td></tr></table></figure><p>CIDR值表：</p><table><thead><tr><th>255.0.0.0         &#x2F;8</th></tr></thead><tbody><tr><td>255.128.0.0        &#x2F;9</td></tr><tr><td>255.192.0.0        &#x2F;10</td></tr><tr><td>255.224.0.0        &#x2F;11</td></tr><tr><td>255.240.0.0        &#x2F;12</td></tr><tr><td>255.248.0.0        &#x2F;13</td></tr><tr><td>255.252.0.0        &#x2F;14</td></tr><tr><td>255.254.0.0        &#x2F;15</td></tr><tr><td>255.255.0.0        &#x2F;16</td></tr><tr><td>255.255.128.0       &#x2F;17</td></tr><tr><td>255.255.192.0       &#x2F;18</td></tr><tr><td>255.255.224.0       &#x2F;19</td></tr><tr><td>255.255.240.0      &#x2F;20</td></tr><tr><td>255.255.248.0      &#x2F;21</td></tr><tr><td>255.255.252.0      &#x2F;22</td></tr><tr><td>255.255.254.0      &#x2F;23</td></tr><tr><td>255.255.255.0      &#x2F;24</td></tr><tr><td>255.255.255.128     &#x2F;25</td></tr><tr><td>255.255.255.192     &#x2F;26</td></tr><tr><td>255.255.255.224     &#x2F;27</td></tr><tr><td>255.255.255.240     &#x2F;28</td></tr><tr><td>255.255.255.248     &#x2F;29</td></tr><tr><td>255.255.255.252     &#x2F;30</td></tr></tbody></table><h6 id="5-网关"><a href="#5-网关" class="headerlink" title="5.网关"></a>5.网关</h6><p>网关用来转发来自不同网段之间的数据包。</p><p>报文转发过程中，首先需要确定转发路径以及通往目的网段的接口，然后将报文封装在以太帧中通过指定的物理接口转发出去。如果目的主机与源主机不在同一网段，报文需要先转发到网关，然后通过网关将报文转发到目的网段。</p><p>网关是指接收并处理本地网段主机发送的报文并转发到目的网段的设备。为实现此功能，网关必须知道目的网段的IP地址。网关设备上连接本地网段的接口地址即为该网段的网关地址。</p><h5 id="5-进制之间转换"><a href="#5-进制之间转换" class="headerlink" title="5.进制之间转换"></a>5.进制之间转换</h5><table><thead><tr><th><strong>进制</strong></th><th><strong>字符范围</strong></th><th><strong>基值</strong></th></tr></thead><tbody><tr><td>二进制</td><td>0 — 1</td><td>2</td></tr><tr><td>十进制</td><td>0 — 9</td><td>10</td></tr><tr><td>十六进制</td><td>0 —9，A — F</td><td>16</td></tr></tbody></table><table><thead><tr><th>比特位</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>乘方</td><td>27</td><td>26</td><td>25</td><td>24</td><td>23</td><td>22</td><td>21</td><td>20</td></tr><tr><td>数值</td><td>128</td><td>64</td><td>32</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td></tr></tbody></table><table><thead><tr><th>十进制</th><th>二进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>00000000</td><td>00</td></tr><tr><td>1</td><td>00000001</td><td>01</td></tr><tr><td>2</td><td>00000010</td><td>02</td></tr><tr><td>3</td><td>00000011</td><td>03</td></tr><tr><td>4</td><td>00000100</td><td>04</td></tr><tr><td>5</td><td>00000101</td><td>05</td></tr><tr><td>6</td><td>00000110</td><td>06</td></tr><tr><td>7</td><td>00000111</td><td>07</td></tr><tr><td>8</td><td>00001000</td><td>08</td></tr></tbody></table><table><thead><tr><th>十进制</th><th>二进制</th><th>十六进制</th></tr></thead><tbody><tr><td>9</td><td>00001001</td><td>09</td></tr><tr><td>10</td><td>00001010</td><td>0A</td></tr><tr><td>11</td><td>00001011</td><td>0B</td></tr><tr><td>12</td><td>00001100</td><td>0C</td></tr><tr><td>13</td><td>00001101</td><td>0D</td></tr><tr><td>14</td><td>00001110</td><td>0E</td></tr><tr><td>15</td><td>00001111</td><td>0F</td></tr><tr><td>…</td><td>…</td><td>…</td></tr><tr><td>255</td><td>11111111</td><td>FF</td></tr></tbody></table><h4 id="四、ICMP协议"><a href="#四、ICMP协议" class="headerlink" title="四、ICMP协议"></a>四、ICMP协议</h4><p>Internet控制消息协议ICMP（Internet Control Message Protocal）是网络层的一个重要协议。ICMP协议用来在网络设备间传递各种差错和控制信息，并对于收集各种网络信息、诊断和排除各种网络故障等方面起着至关重要的作用。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps14.jpg"></p><p>ICMP是TCP&#x2F;IP协议簇的核心协议之一，它用于在IP网络设备之间发送控制报文，传递差错、控制、查询等信息。</p><h5 id="1-ICMP差错检测"><a href="#1-ICMP差错检测" class="headerlink" title="1.ICMP差错检测"></a>1.ICMP差错检测</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps15.jpg"></p><p>ICMP Echo Request和ICMP Echo Reply消息常用于诊断源和目的地之间的网络连通性。</p><h5 id="2-ICMP错误报告"><a href="#2-ICMP错误报告" class="headerlink" title="2.ICMP错误报告"></a>2.ICMP错误报告</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps16.jpg"></p><h5 id="3-ICMP重定向（Redirect）"><a href="#3-ICMP重定向（Redirect）" class="headerlink" title="3.ICMP重定向（Redirect）"></a>3.ICMP重定向（Redirect）</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps17.jpg"></p><p>ICMP Redirect重定向消息用于支持路由功能。如图所示，主机A希望发送报文到服务器A，于是根据配置的默认网关地址向网关RTB发送报文。网关RTB收到报文后，检查报文信息，发现报文应该转发到与源主机在同一网段的另一个网关设备RTA，因为此转发路径是更优的路径，所以RTB会向主机发送一个Redirect消息，通知主机直接向另一个网关RTA发送该报文。主机收到Redirect消息后，会向RTA发送报文，然后RTA会将该报文再转发给服务器A。</p><h5 id="4-ICMP数据包格式"><a href="#4-ICMP数据包格式" class="headerlink" title="4.ICMP数据包格式"></a>4.ICMP数据包格式</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps18.jpg"></p><p>Type表示ICMP消息类型，Code表示同一消息类型中的不同信息。</p><p>ICMP消息封装在IP报文中。ICMP消息的格式取决于Type和Code字段，其中Type字段为消息类型，Code字段包含该消息类型的具体参数。后面的校验和字段用于检查消息是否完整。消息中包含32比特的可变参数，这个字段一般不使用，通常设置为0。在ICMP Redirect消息中，这个字段用来指定网关IP地址，主机根据这个地址将报文重定向到指定网关。在Echo请求消息中，这个字段包含标识符和序号，源端根据这两个参数将收到的回复消息与本端发送的Echo请求消息进行关联。尤其是当源端向目的地发送了多个Echo请求消息时，需要根据标识符和序号将Echo请求和回复消息进行一一对应。</p><h5 id="5-ICMP消息类型和编码类型"><a href="#5-ICMP消息类型和编码类型" class="headerlink" title="5.ICMP消息类型和编码类型"></a>5.ICMP消息类型和编码类型</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps19.jpg"></p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps20.jpg"></p><p>ICMP定义了多种消息类型，并用于不同的场景。有些消息不需要Code字段来描述具体类型参数，仅用Type字段表示消息类型。比如，ICMP Echo回复消息的Type字段设置为0。</p><p>有些ICMP消息使用Type字段定义消息大类，用Code字段表示消息的具体类型。比如，类型为3的消息表示目的不可达，不同的Code值表示不可达的原因，包括目的网络不可达（Code&#x3D;0）、目的主机不可达（Code&#x3D;1）、协议不可达（Code&#x3D;2）、目的TCP&#x2F;UDP端口不可达（Code&#x3D;3）等。</p><h5 id="6-ICMP应用-ping"><a href="#6-ICMP应用-ping" class="headerlink" title="6.ICMP应用-ping"></a>6.ICMP应用-ping</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps21.jpg"></p><p>ping命令的输出信息中包括目的地址、ICMP报文长度、序号、TTL值以及往返时间。序号是包含在Echo回复消息（Type&#x3D;0）中的可变参数字段，TTL包含在消息的IP头中。</p><h5 id="7-ICMP应用-tracert"><a href="#7-ICMP应用-tracert" class="headerlink" title="7.ICMP应用-tracert"></a>7.ICMP应用-tracert</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps22.jpg"></p><p>ICMP的另一个典型应用是Tracert。Tracert基于报文头中的TTL值来逐跳跟踪报文的转发路径。为了跟踪到达某特定目的地址的路径，源端首先将报文的TTL值设置为1。该报文到达第一个节点后，TTL超时，于是该节点向源端发送TTL超时消息，消息中携带时间戳。然后源端将报文的TTL值设置为2，报文到达第二个节点后超时，该节点同样返回TTL超时消息，以此类推，直到报文到达目的地。这样，源端根据返回的报文中的信息可以跟踪到报文经过的每一个节点，并根据时间戳信息计算往返时间。Tracert是检测网络丢包及时延的有效手段，同时可以帮助管理员发现网络中的路由环路。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">tracert</span>常用的配置参数说明如下：<br>-a source-<span class="hljs-built_in">ip</span>-address指定tracert报文的源地址<br>-f first-<span class="hljs-meta">ttl</span>指定初始<span class="hljs-meta">TTL</span>,缺省值是<span class="hljs-number">1</span><br>-m max-<span class="hljs-meta">ttl</span>指定最大<span class="hljs-meta">TTL</span>,缺省值是<span class="hljs-number">30</span><br>-name使能显示每一跳的主机名<br>-p port指定目的主机的UDP端口号<br></code></pre></td></tr></table></figure><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps23.jpg"></p><p>tracert显示数据包在网络传输过程中所经过的每一跳</p><p>源端（RTA）向目的端（主机B）发送一个UDP报文，TTL值为1，目的UDP端口号是大于30000的一个数，因为在大多数情况下，大于30000的UDP端口号是任何一个应用程序都不可能使用的端口号。</p><p>第一跳（RTB）收到源端发出的UDP报文后，判断出报文的目的IP地址不是本机IP地址，将TTL值减1后，判断出TTL值等于0，则丢弃报文并向源端发送一个ICMP超时（Time Exceeded）报文（该报文中含有第一跳的IP地址10.0.0.2），这样源端就得到了RTB的地址。</p><p>源端收到RTB的ICMP超时报文后，再次向目的端发送一个UDP报文，TTL值为2。第二跳（RTC）收到源端发出的UDP报文后，回应一个ICMP超时报文，这样源端就得到了RTC的地址（20.0.0.2）。</p><p>以上过程不断进行，直到目的端收到源端发送的UDP报文后，判断出目的IP地址是本机IP地址，则处理此报文。根据报文中的目的UDP端口号寻找占用此端口号的上层协议，因目的端没有应用程序使用该UDP端口号，则向源端返回一个ICMP端口不可达（Destination Unreachable）报文。</p><p>源端收到ICMP端口不可达报文后，判断出UDP报文已经到达目的端，则停止Tracert程序，从而得到数据报文从源端到目的端所经历的路径（10.0.0.2；20.0.0.2；30.0.0.2）。</p><h5 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h5><p>ping命令使用到的是哪两类ICMP消息？</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">ping</span>利用ICMP <span class="hljs-built_in">Echo</span>请求消息（<span class="hljs-built_in">Type</span>=<span class="hljs-number">8</span>）来发起检测目的可达性。目的端收到ICMP <span class="hljs-built_in">Echo</span>请求消息后，根据IP报文头中的源地址向源端发送ICMP <span class="hljs-built_in">Echo</span>回复消息（<span class="hljs-built_in">Type</span>=<span class="hljs-number">0</span>）<br></code></pre></td></tr></table></figure><p>当网络设备收到TTL值为0的IP报文时，会如何操作？</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">如果<span class="hljs-built_in">IP</span>数据报在到达目的之前<span class="hljs-meta">TTL</span>已经降为<span class="hljs-number">0</span>，则收到<span class="hljs-built_in">IP</span>数据包的网络设备会丢弃该数据包，并向源端发送ICMP消息通知源端<span class="hljs-meta">TTL</span>超时<br></code></pre></td></tr></table></figure><h4 id="五、ICMP重定向攻击"><a href="#五、ICMP重定向攻击" class="headerlink" title="五、ICMP重定向攻击"></a>五、ICMP重定向攻击</h4><p>ICMP重定向信息是路由器向主机提供实时的路由信息，当一个主机收到ICMP重定向信息时，它就会根据这个信息来更新自己的路由表。由于缺乏必要的合法性检查，如果一个黑客想要被攻击的主机修改它的路由表，黑客就会发送 ICMP重定向信息给被攻击的主机，让该主机按照黑客的要求来修改路由表。</p><p>在被攻击机上查看被攻击前的路由表：</p><p>C:\Documents and Settings\Administrator&gt;route print</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps24.jpg"></p><p>在kali机上开启路由转发</p><p><code>#echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code></p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250227155216903.png"></p><p>在kali机中安装netwox工具</p><p># apt-get install netwox </p><p>在kali机中使用netwox工具实现icmp重定向攻击</p><p>netwox 86 -f “host {被攻击主机ip地址}” -g “{新指定的网关ip地址}” -i “{当前网关ip地址}”</p><p># netwox 86 -f “host 192.168.149.151” -g “192.168.149.156” -i “192.168.149.2”</p><p>在kali中另开一个终端并打开wireshark进行抓包可以看到被攻击的访问流量，如下图所示：</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps25.jpg"></p><p>在被攻击机查看路由表，可以看到所有访问流量都是经过kali机进行访问的，如下图：</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps26.jpg"></p><p>netwox工具使用参考：<a href="https://blog.51cto.com/u_13389043/6217697">https://blog.51cto.com/u_13389043/6217697</a></p><p>ICMP协议介绍：<a href="https://zhuanlan.zhihu.com/p/369623317">https://zhuanlan.zhihu.com/p/369623317</a></p><h5 id="ICMP重定向攻击防范措施"><a href="#ICMP重定向攻击防范措施" class="headerlink" title="ICMP重定向攻击防范措施"></a>ICMP重定向攻击防范措施</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">在网络边界合理配置防火墙安全策略以预防攻击，一般除了出站的ICMP Echo Request、出站的ICMP SourceQuench、进站的<span class="hljs-meta">TTL</span> Exceeded和进站的ICMP DestinationUnrcachablc 之外,其它ICMP 消息类型都应该被阻止。<br>通过端口镜像技术在内网部署sniffer，全面监控网络流量,当发生攻击时，及时分析数据包，定位攻击源。<br>及时升级系统软件,配置系统自带的默认防火墙以预防攻击,并通过对注册表的修改禁止 ICMP重定向报文、禁止响应ICMP路由通告报文。<br></code></pre></td></tr></table></figure><h4 id="六、ARP协议"><a href="#六、ARP协议" class="headerlink" title="六、ARP协议"></a>六、ARP协议</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm">当网络设备有数据要发送给另一台网络设备时，必须要知道对方的网络层地址（即地址）。<span class="hljs-built_in">IP</span>地址由网络层来提供，但是仅有<span class="hljs-built_in">IP</span>地址是不够的，<span class="hljs-built_in">IP</span>数据报文必须封装成帧才能通过数据链路进行发送。数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址。通过目的<span class="hljs-built_in">IP</span>地址来获取目的MAC地址的过程是由ARP协议来实现的。<br><br><span class="hljs-symbol">ARP</span>地址解析协议，是将<span class="hljs-built_in">IP</span>地址解析成MAC地址。<br><br>一个网络设备要发送数据给另一个网络设备时，必须要知道对方的<span class="hljs-built_in">IP</span>地址。但是，仅有<span class="hljs-built_in">IP</span>地址是不够的，因为<span class="hljs-built_in">IP</span>数据报文必须封装成帧才能通过数据链路进行发送，而数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址。每一个网络设备在数据封装前都需要获取下一跳的MAC地址。<span class="hljs-built_in">IP</span>地址由网络层来提供，MAC地址通过ARP协议来获取。ARP协议是TCP/<span class="hljs-built_in">IP</span>协议簇中的重要组成部分，它能够通过目的<span class="hljs-built_in">IP</span>地址获取目标设备的MAC地址，从而实现数据链路层的可达性。<br></code></pre></td></tr></table></figure><h5 id="1-ARP数据包格式"><a href="#1-ARP数据包格式" class="headerlink" title="1.ARP数据包格式"></a>1.ARP数据包格式</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps27.jpg"></p><p>ARP报文不能穿越路由器，不能被转发到其他广播域。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">网络设备通过ARP报文来发现目的MAC地址。ARP报文中包含以下字段：<br><span class="hljs-number">1</span><span class="hljs-selector-class">.Hardware</span> Type表示硬件地址类型，一般为以太网；<br><span class="hljs-number">2</span><span class="hljs-selector-class">.Protocol</span> Type表示三层协议地址类型，一般为IP；<br><span class="hljs-number">3</span><span class="hljs-selector-class">.Hardware</span> Length和Protocol Length为MAC地址和IP地址的长度，单位是字节；<br><span class="hljs-number">4</span><span class="hljs-selector-class">.Operation</span> Code指定了ARP报文的类型，包括ARP Request和ARP Reply；<br><span class="hljs-number">5</span><span class="hljs-selector-class">.Source</span> Hardware  Address指的是发送ARP报文的设备MAC地址；<br><span class="hljs-number">6</span><span class="hljs-selector-class">.Source</span> Protocol Address指的是发送ARP报文的设备IP地址；<br><span class="hljs-number">7</span><span class="hljs-selector-class">.Destination</span> Hardware Address指的是接收者MAC地址，在ARP Request报文中，该字段值为<span class="hljs-number">0</span>；<br><span class="hljs-number">8</span><span class="hljs-selector-class">.Destination</span> Protocol Address指的是接收者的IP地址。<br></code></pre></td></tr></table></figure><h5 id="2-ARP工作过程"><a href="#2-ARP工作过程" class="headerlink" title="2.ARP工作过程"></a>2.ARP工作过程</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps28.jpg"></p><p>通过ARP协议，网络设备可以建立目标IP地址和MAC地址之间的映射。网络设备通过网络层获取到目的IP地址之后，还要判断目的MAC地址是否已知。</p><h5 id="3-ARP缓存"><a href="#3-ARP缓存" class="headerlink" title="3.ARP缓存"></a>3.ARP缓存</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303172630400.png"></p><p>网络设备一般都有一个ARP缓存（ARP Cache），ARP缓存用来存放IP地址和MAC地址的关联信息。在发送数据前，设备会先查找ARP缓存表。如果缓存表中存在对方设备的MAC地址，则直接采用该MAC地址来封装帧，然后将帧发送出去。如果缓存表中不存在相应信息，则通过发送ARP Request报文来获得它。学习到的IP地址和MAC地址的映射关系会被放入ARP缓存表中存放一段时间。在有效期内，设备可以直接从这个表中查找目的MAC地址来进行数据封装，而无需进行ARP查询。过了这段有效期，ARP表项会被自动删除。<br>如果目标设备位于其他网络，则源设备会在ARP缓存表中查找网关的MAC地址，然后将数据发送给网关，网关再把数据转发给目的设备。</p><h5 id="4-ARP请求"><a href="#4-ARP请求" class="headerlink" title="4.ARP请求"></a>4.ARP请求</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303172655467.png"></p><p>本例中，主机A的ARP缓存表中不存在主机C的MAC地址，所以主机A会发送ARP Request来获取目的MAC地址。ARP Request报文封装在以太帧里。帧头中的源MAC地址为发送端主机A的MAC地址。此时，由于主机A不知道主机C的MAC地址，所以目的MAC地址为广播地址FF-FF-FF-FF-FF-FF。ARP Request报文中包含源IP地址、目的IP地址、源MAC地址、目的MAC地址，其中目的MAC地址的值为0。ARP Request报文会在整个网络上传播，该网络中所有主机包括网关都会接收到此ARP Request报文。网关将会阻止该报文发送到其他网络上。</p><h5 id="5-ARP响应"><a href="#5-ARP响应" class="headerlink" title="5.ARP响应"></a>5.ARP响应</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303192810364.png"></p><p>所有的主机接收到该ARP Request报文后，都会检查它的<strong>目的协议地址字段与自身的IP地址</strong>是否匹配。如果不匹配，则该主机将不会响应该ARP Request报文。如果匹配，则该主机会将ARP Request报文中的源MAC地址和源IP地址信息记录到自己的ARP缓存表中，然后通过ARP Reply报文进行响应。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303193849500.png"></p><p>主机C会向主机A回应ARP Reply报文。ARP Reply报文中的源协议地址就是主机C自己的IP地址，目标协议地址是主机A的IP地址，目的MAC地址是主机A的MAC地址，源MAC地址是自己的MAC地址，同时Operation Code被设置为Reply。ARP Reply报文通过单播传送。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303195054287.png"></p><p>主机A收到ARP Reply以后，会检查ARP报文中目的MAC地址是否与自己的MAC匹配。如果匹配，ARP报文中的源MAC地址和源地址会被记录到主机A的ARP缓存表中。</p><h5 id="6-ARP代理"><a href="#6-ARP代理" class="headerlink" title="6.ARP代理"></a>6.ARP代理</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps29.jpg"></p><p>在上述例子的组网中，主机A需要与主机B通信时，目的IP地址与本机的IP地址位于不同网络，但是由于主机A未配置网关，所以它将会以广播形式发送ARP Request报文，请求主机B的MAC地址。但是，广播报文无法被路由器转发，所以主机B无法收到主机A的ARP请求报文，当然也就无法应答。<br>在路由器上启用代理ARP功能，就可以解决这个问题。启用代理ARP后，路由器收到这样的请求，会查找路由表，如果存在主机B的路由表项，路由器将会使用自己的G0&#x2F;0&#x2F;0接口的MAC地址来回应该ARP Request。主机A收到ARP Reply后，将以路由器的G0&#x2F;0&#x2F;0接口MAC地址作为目的MAC地址进行数据转发。</p><h5 id="7-免费ARP"><a href="#7-免费ARP" class="headerlink" title="7.免费ARP"></a>7.免费ARP</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps30.jpg"></p><p>主机被分配了IP地址或者IP地址发生变更后，必须立刻检测其所分配的IP地址在网络上是否是唯一的，以避免地址冲突。主机通过发送ARP Request报文来进行地址冲突检测。</p><p>主机A将ARP Request广播报文中的目的IP地址字段设置为自己的IP地址，且该网络中所有主机包括网关都会接收到此报文。当目的IP地址已经被某一个主机或网关使用时，该主机或网关就会回应ARP Reply报文。通过这种方式，主机A就能探测到IP地址冲突了。</p><h5 id="8-总结-1"><a href="#8-总结-1" class="headerlink" title="8.总结"></a>8.总结</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm">网络设备在什么情况下会发送ARP Request？<br>答：源设备在发送数据给目的设备前，首先会查看自身的ARP缓存，查找ARP缓存中是否存在目的设备的<span class="hljs-built_in">IP</span>地址和MAC地址的映射。如果存在则直接使用，如果不存在则会发送ARP request。<br><br>网络设备什么时候会产生免费ARP？<br>当网络上的一个设备被分配了<span class="hljs-built_in">IP</span>地址或者<span class="hljs-built_in">IP</span>地址发生变更后，可以通过免费ARP来检查<span class="hljs-built_in">IP</span>地址是否冲突。<br></code></pre></td></tr></table></figure><h4 id="七、ARP攻击原理"><a href="#七、ARP攻击原理" class="headerlink" title="七、ARP攻击原理"></a>七、ARP攻击原理</h4><h5 id="ARP攻击的防范措施"><a href="#ARP攻击的防范措施" class="headerlink" title="ARP攻击的防范措施"></a><strong>ARP攻击的防范措施</strong></h5><p>使用静态ARP表</p><p>将MAC地址和IP地址绑定在一起，避免动态ARP请求引发的攻击，如：网关&#x2F;关键服务器。</p><p>命令格式：arp -s IP地址 MAC地址 类型</p><p>如：&gt;arp -s 192.168.149.2  00-50-56-e9-07-70</p><p>-s—将相应的IP地址与物理地址的捆绑。</p><p>-d—删除所给出的IP地址与物理地址的捆绑。</p><p>-a—通过查询Arp协议表来显示lP地址和对应物理地址情况。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/wps31.jpg"></p><p>启用ARP欺骗检测</p><p>一些网络设备可以检测到ARP欺诈攻击，及时发现异常的ARP请求，并对网络流量进行限制，从而防止ARP攻击。</p><p>使用VPN</p><p>通过VPN建立虚拟专用网络，可以避免ARP攻击带来的风险。</p><p>加强网络安全管理</p><p>网络管理员可以对网络流量进行监控，及时发现异常的ARP请求，并及时采取措施，限制恶意流量的传输，从而保护网络安全。</p><p>使用网络设备</p><p>例如防火墙、入侵检测系统等设备可以帮助管理员检测和防范网络攻击，包括ARP攻击。</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层定义了主机应用程序之间端到端的连通性。传输层中最为常见的两个协议分别是传输控制协议TCP ( Transmission Control Protocol )和用户数据包协议UDP ( User Datagram Protocol )。</p><h4 id="一、TCP"><a href="#一、TCP" class="headerlink" title="一、TCP"></a>一、TCP</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303203829263.png"></p><p>TCP是一种面向连接的传输层协议，提供可靠的传输服务。</p><p>TCP位于TCP&#x2F;IP模型的传输层，它是一种面向连接的端到端协议。TCP作为传输控制协议，可以为主机提供可靠的数据传输。在本例中，两台主机在通信之前，需要TCP在它们之间建立可靠的传输通道。</p><h5 id="1-TCP端口号"><a href="#1-TCP端口号" class="headerlink" title="1.TCP端口号"></a>1.TCP端口号</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303204321907.png"></p><p>TCP允许一个主机同时运行多个应用进程。每台主机可以拥有多个应用端口，每对端口号、源和目标IP地址的组合唯一地标识了一个会话。端口分为知名端口和动态端口。有些网络服务会使用固定的端口，这类端口称为<strong>知名端口，端口号范围为0-1023</strong>。如FTP、HTTP、Telnet、SNMP服务均使用知名端口。<strong>动态端口号范围从1024到65535</strong>，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用。</p><h5 id="2-TCP头部"><a href="#2-TCP头部" class="headerlink" title="2.TCP头部"></a>2.TCP头部</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303204629697.png"></p><p>TCP通常使用IP作为网络层协议，这时TCP数据段被封装在IP数据包内。</p><p>TCP数据段由TCP Header（头部）和TCP Data（数据）组成。TCP最多可以有60个字节的头部，如果没有Options字段，正常的长度是20字节。</p><p>TCP Header是由如上图标识的一些字段组成，这里列出几个常用字段。</p><p>1.16位源端口号：源主机的应用程序使用的端口号。</p><p>2.16位目的端口号：目的主机的应用程序使用的端口号。每个TCP头部都包含源和目的端的端口号，这两个值加上IP头部中的源IP地址和目的IP地址可以唯一确定一个TCP连接。</p><p>3.32位序列号：用于标识从发送端发出的不同的TCP数据段的序号。数据段在网络中传输时，它们的顺序可能会发生变化；接收端依据此序列号，便可按照正确的顺序重组数据。</p><p>4.32位确认序列号：用于标识接收端确认收到的数据段。确认序列号为成功收到的数据序列号加1。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303210021472.png"></p><p>5.4位头部长度：表示头部占32bit字的数目，它能表达的TCP头部最大长度为60字节。</p><p>6.16位窗口大小：表示接收端期望通过单次确认而收到的数据的大小。由于该字段为16位，所以窗口大小的最大值为65535字节，该机制通常用来进行流量控制。</p><p>7.16位校验和：校验整个TCP报文段，包括TCP头部和TCP数据。该值由发送端计算和记录并由接收端进行验证。</p><p>8.URG为紧急指针位，置为1表示该数据紧急，对应的Urgent Pointer里面有详细的紧急信息</p><h5 id="3-TCP建立连接的过程"><a href="#3-TCP建立连接的过程" class="headerlink" title="3.TCP建立连接的过程"></a>3.TCP建立连接的过程</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303210255139.png"></p><p>TCP是一种可靠的，面向连接的全双工传输层协议。TCP通过三次握手建立可靠连接。</p><p>TCP连接的建立是一个三次握手的过程。如图所示：<br>主机A（通常也称为客户端）发送一个标识了SYN的数据段，表示期望与服务器A建立连接，此数据段的序列号（seq）为x。<br>服务器B回复标识了SYN+ACK的数据段，此数据段的序列号（seq）为y，确认序列号为主机A的序列号加1（x+1），以此作为对主机A的SYN报文的确认。<br>主机A发送一个标识了ACK的数据段，此数据段的序列号（seq）为x+1，确认序列号为服务器B的序列号加1（y+1），以此作为对服务器B的SYN报文的确认。</p><h5 id="4-TCP传输过程"><a href="#4-TCP传输过程" class="headerlink" title="4.TCP传输过程"></a>4.TCP传输过程</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303210814808.png"></p><p>TCP的可靠传输还体现在TCP使用了<strong>确认技术</strong>来确保目的设备收到了从源设备发来的数据，并且是准确无误的。</p><p>确认技术的工作原理如下：<br>目的设备接收到源设备发送的数据段时，会向源端发送确认报文，源设备收到确认报文后，继续发送数据段，如此重复。<br>如图所示，主机A向服务器A发送TCP数据段，为描述方便假定每个数据段的长度都是500个字节。当服务器A成功收到序列号是M+1499的字节以及之前的所有字节时，会以序列号M+1499+1&#x3D;M+1500进行确认。另外，由于数据段N+3传输失败，所以服务器A未能收到序列号为M+1500的字节，因此服务器A还会再次以序列号M+1500进行确认。</p><h5 id="5-TCP流量控制"><a href="#5-TCP流量控制" class="headerlink" title="5.TCP流量控制"></a>5.TCP流量控制</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303211354732.png"></p><p><strong>TCP滑动窗口技术</strong>通过动态改变窗口大小来实现对端到端设备之间的数据传输进行流量控制。</p><p>如图所示，主机A和服务器A之间通过滑动窗口来实现流量控制。为方便理解，此例中只考虑主机A发送数据给服务器A时，服务器A通过滑动窗口进行流量控制。<br>主机A向服务器发送4个长度为1024字节的数据段，其中主机的窗口大小为4096个字节。服务器A收到第3个数据段后，缓存区满，第4个数据段被丢弃。服务器以ACK 3073响应，窗口大小调整为3072，表明服务器的缓冲区只能处理3072个字节的数据段。于是主机A改变其发送速率，发送窗口大小为3072的数据段。</p><h5 id="6-TCP关闭连接"><a href="#6-TCP关闭连接" class="headerlink" title="6.TCP关闭连接"></a>6.TCP关闭连接</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250303211735553.png"></p><p>主机在关闭连接之前，要确认收到来自对方的ACK。</p><p>TCP支持全双工模式传输数据，这意味着同一时刻两个方向都可以进行数据的传输。在传输数据之前，TCP通过三次握手建立的实际上是两个方向的连接，因此在传输完毕后，两个方向的连接必须都关闭。</p><p>TCP连接的建立是一个三次握手的过程，而TCP连接的终止则要经过四次握手。</p><p>如图所示：<br>主机A想终止连接，于是发送一个标识了FIN，ACK的数据段，序列号为a，确认序列号为b。<br>服务器A回应一个标识了ACK的数据段，序列号为b，确认序号为a+1，作为对主机A的FIN报文的确认。<br>服务器A想终止连接，于是向主机A发送一个标识了FIN，ACK的数据段，序列号为b，确认序列号为a+1。<br>主机A回应一个标识了ACK的数据段，序列号为a+1，确认序号为b+1，作为对服务器A的FIN报文的确认。<br>以上四次交互便完成了两个方向连接的关闭。</p><h5 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h5><p>TCP头部中的确认标识位有什么作用？</p><p>TCP报文头中的ACK标志位用于目的端对已收到数据的确认。目的端成功收到序列号为x的字节及之前的所有字节后，会以序列号x+1进行确认。</p><p>TCP头部中有哪些标识位参与TCP三次握手？</p><p>在TCP的三次握手过程中，要使用SYN和ACK标志位来请求建立连接和确认建立连接。</p><h4 id="二、UDP"><a href="#二、UDP" class="headerlink" title="二、UDP"></a>二、UDP</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304140259828.png"></p><p>UDP是一种面向无连接的传输层协议，传输可靠性没有保证。</p><p>当应用程序对传输的可靠性要求不高，但是对传输速度和延迟要求较高时，可以用UDP协议来替代TCP协议在传输层控制数据的转发。UDP将数据从源端发送到目的端时，无需事先建立连接。UDP采用了简单、易操作的机制在应用程序间传输数据，没有使用TCP中的确认技术或滑动窗口机制，因此UDP不能保证数据传输的可靠性，也无法避免接收到重复数据的情况。</p><h5 id="1-UDP头部"><a href="#1-UDP头部" class="headerlink" title="1.UDP头部"></a>1.UDP头部</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304140614316.png"></p><p>UDP报文分为UDP报文头和UDP数据区域两部分。报头由源端口、目的端口、报文长度以及校验和组成。UDP适合于实时数据传输，如语音和视频通信。相比于TCP，UDP的传输效率更高、开销更小，但是无法保障数据传输的可靠性。UDP头部的标识如下：</p><p>16位源端口号：源主机的应用程序使用的端口号。<br>16位目的端口号：目的主机的应用程序使用的端口号。<br>16位UDP长度：是指UDP头部和UDP数据的字节长度。因为UDP头部长度为8字节，所以该字段的最小值为8。<br>16位UDP校验和：该字段提供了与TCP校验字段同样的功能；该字段是可选的。</p><h5 id="2-UDP传输过程"><a href="#2-UDP传输过程" class="headerlink" title="2.UDP传输过程"></a>2.UDP传输过程</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304141109772.png"></p><p>使用UDP传输数据时，由应用程序根据需要提供报文到达确认、排序、流量控制等功能。</p><p>主机A发送数据包时，这些数据包是以<strong>有序</strong>的方式发送到网络中的，每个数据包<strong>独立</strong>地在网络中被发送，所以不同的数据包可能会通过不同的网络路径到达主机B。这样的情况下，先发送的数据包不一定先到达主机B。因为UDP数据包没有序号，主机B将无法通过UDP协议将数据包按照原来的顺序重新组合，所以此时需要<strong>应用程序提供报文的到达确认、排序和流量控制等功能</strong>。通常情况下，UDP采用<strong>实时传输机制和时间戳</strong>来传输语音和视频数据。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304141417419.png"></p><p>UDP不提供重传机制，占用资源小，处理效率高。<br>一些时延敏感的流量，如语音、视频等，通常使用UDP作为传输层协议。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">UDP适合传输对时延敏感的流量，如语音和视频。<br>在使用TCP协议传输数据时，如果一个数据段丢失或者接收端对某个数据段没有确认，发送端会重新发送该数据段。<br>TCP重新发送数据会带来传输延迟和重复数据，降低了用户的体验。对于时延敏感的应用，少量的数据丢失一般可以被忽略，这时使用UDP传输将能够提升用户的体验。<br></code></pre></td></tr></table></figure><h3 id="数据转发过程"><a href="#数据转发过程" class="headerlink" title="数据转发过程"></a>数据转发过程</h3><p>数据包在相同网段内或不同网段之间转发所依据的原理基本一致。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304162837774.png"></p><p>数据可以在同一网络内或者不同网络间传输，数据转发过程也分为本地转发和远程转发，但两者的数据转发原理是基本一样的，都是遵循TCP&#x2F;IP协议簇。</p><p>本示例中，主机A需要访问服务器A的Web服务，并且假定两者之间已经建立了TCP连接。接下来会以此示例来讲解数据在不同网络间的传输过程。</p><h4 id="一、TCP封装"><a href="#一、TCP封装" class="headerlink" title="一、TCP封装"></a>一、TCP封装</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304163241970.png"></p><p>主机A会对待发送的应用数据首先执行<strong>加密和压缩</strong>等相关操作，之后进行传输层封装。<strong>Web应用是基于传输层的TCP协议传输数据的。</strong></p><p>主机A使用TCP进行报文封装时，必须填充源端口和目的端口字段，初始序列号和确认序列号字段，标识位，窗口字段以及校验和字段。此例中数据段的源端口号为主机A随机选择的1027号端口，目的端口号为服务器A的TCP知名端口80。</p><h4 id="二、IP封装"><a href="#二、IP封装" class="headerlink" title="二、IP封装"></a>二、IP封装</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304163845015.png"></p><p>主机A完成传输层封装后，一般会进行网络层数据封装，在使用IP进行封装时，需要明确IP报文的源和目的地址。如果IP报文的大小大于网络的最大传输单元（MTU），则该报文有可能在传输过程中被分片。</p><p>生存时间（TTL）字段用来减少网络环路造成的影响。ARG3系列路由器产生的数据包，默认TTL值为255。<strong>路由器转发一个数据包之前，该值会被减1，</strong>如果路由器发现该值被减为0，就会丢弃该数据包。这样，即使网络中存在环路，数据包也不会在网络上一直被转发。</p><p>协议字段标识了传输层所使用的协议。本例中，传输层使用的是TCP协议，所以该字段的填充值为0X06。</p><h4 id="三、以太网封装"><a href="#三、以太网封装" class="headerlink" title="三、以太网封装"></a>三、以太网封装</h4><h5 id="1-查找路由（获得目的IP）"><a href="#1-查找路由（获得目的IP）" class="headerlink" title="1.查找路由（获得目的IP）"></a>1.查找路由（获得目的IP）</h5><p>主机A必须要拥有到达目的地的路由（确定下一跳—&gt;确定数据帧头封装MAC</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304171904775.png"></p><p>每个主机都会独自维护各自的路由表项。主机A在发送数据前需要先检查是否能够到达目的端，这个过程是通过查找路由来完成的。在此示例中，主机A拥有一条到达“任何网络”（在IP编址部分已经简要介绍过）的路由，它发往其他网络的数据都会通过IP地址为10.1.1.1的接口转发到下一跳，即网关10.1.1.254。</p><h5 id="2-ARP（获得目的MAC）"><a href="#2-ARP（获得目的MAC）" class="headerlink" title="2.ARP（获得目的MAC）"></a>2.ARP（获得目的MAC）</h5><p>通过ARP缓存表找到下一跳的MAC地址。<br>如果表项里没有下一跳的MAC地址，主机A会发送ARP请求。</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304165808854.png"></p><p>接下来，由于数据包要被封装成数据帧，所以主机A需要获取下一跳的MAC地址，也就是网关的MAC地址。主机首先会查询ARP缓存表。本例中，主机A的ARP缓存表中存在网关MAC地址的表项。<br>如果没有查找到网关的MAC地址表项，主机A会通过发送ARP请求来获取网关的MAC地址。</p><h5 id="3-以太网封装"><a href="#3-以太网封装" class="headerlink" title="3.以太网封装"></a>3.以太网封装</h5><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304192802271.png"></p><p>主机A在链路层封装数据帧时，会遵循IEEE 802.3或Ethernet_II标准，Ethernet_II帧头中的<strong>类型字段</strong>填充为0x0800，以表示网络层使用的是IP协议。源MAC地址为主机A的MAC地址，目的MAC地址为网关路由器E0&#x2F;0接口的MAC地址。</p><h4 id="四、数据帧转发过程"><a href="#四、数据帧转发过程" class="headerlink" title="四、数据帧转发过程"></a>四、数据帧转发过程</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304195405073.png"></p><p>主机工作在半双工状态下，所以会使用CSMA&#x2F;CD来检测链路是否空闲。<br>前导码用于使接收者进入同步状态，定界符用于指示帧的开始。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">主机<span class="hljs-keyword">A</span>工作在半双工状态下，所以会使用CSMA/CD来检测链路是否空闲。如果链路空闲，主机<span class="hljs-keyword">A</span>会将一个前导码（Preamble）和一个帧首定界符（SFD）附加到帧头然后进行传输。前导码的作用是使接收设备进行同步并做好接收数据帧的准备。前导码是包括了<span class="hljs-number">7</span>个字节的二进制“<span class="hljs-number">1</span>”、“<span class="hljs-number">0</span>”交替的代码，即<span class="hljs-number">1010…10共56</span>位。帧首定界符是长度为<span class="hljs-number">1</span>个字节的<span class="hljs-number">10101011</span>二进制序列，它的作用是使接收端对帧的第一位进行定位。<br></code></pre></td></tr></table></figure><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304200304848.png"></p><p>同一个冲突域里的设备都会接收到主机A发送的数据帧。<br>只有网关（RTA）会处理该数据帧，并继续转发。</p><p>本例中，主机A发送数据帧到共享以太网，此网络中的所有网络设备都会收到该帧。设备收到帧之后，首先会进行FCS校验。如果FCS校验未能通过，则帧被立即丢弃。对于通过了FCS校验的帧，设备会检查帧中的目的MAC地址。如果帧中的目的MAC地址与自己的MAC地址不同，设备将丢弃帧，如果相同，则会继续处理。处理过程中，帧头帧尾会被剥去（也就是解封装），剩下的数据报文会被根据帧头中的类型字段的值来送到网络层中的对应协议模块去处理。</p><h4 id="五、数据包转发过程"><a href="#五、数据包转发过程" class="headerlink" title="五、数据包转发过程"></a>五、数据包转发过程</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304201024021.png"></p><p>网关检查是否具有到达目的网络的路由条目。<br>如果存在转发路径，则为数据包添加一个新的二层帧头和帧尾，并继续转发。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">RTA</span>收到此数据报文后，网络层会对该报文进行处理。RTA首先根据<span class="hljs-built_in">IP</span>头部信息中的校验和字段，检查<span class="hljs-built_in">IP</span>数据报文头部的完整性，然后根据目的<span class="hljs-built_in">IP</span>地址查看路由表，确定是否能够将数据包转发到目的端。RTA还必须对<span class="hljs-meta">TTL</span>的值进行处理。另外，报文大小不能超过MTU值。如果报文大小超过MTU值，则报文将被分片。<br>网络层处理完成后，报文将被送到数据链路层重新进行封装，成为一个新的数据帧，该帧的头部会封装新的源MAC地址和目的MAC地址。如果当前网络设备不知道下一跳的MAC地址，将会使用ARP来获得。<br></code></pre></td></tr></table></figure><h4 id="六、数据帧解封装"><a href="#六、数据帧解封装" class="headerlink" title="六、数据帧解封装"></a>六、数据帧解封装</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304202010086.png"></p><p>RTB以服务器A的MAC地址作为目的MAC继续转发。<br>服务器A接收到该数据帧后，发现目的MAC为自己的MAC，于是会继续处理该数据帧。</p><p>该示例中，服务器A处于一个共享以太网中，两台服务器都会收到RTB发送的数据帧。该帧的目的MAC地址与服务器B的接口MAC地址不匹配，所以会被服务器B丢弃。<br>服务器A成功收到该帧，并通过FCS校验。服务器A将利用帧中的类型字段来识别在网络层处理该数据的协议。该示例中，服务器A会将解封装后的此数据交给网络层的IP协议来进行处理。</p><h4 id="七、数据包解封装"><a href="#七、数据包解封装" class="headerlink" title="七、数据包解封装"></a>七、数据包解封装</h4><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/image-20250304202315932.png"></p><p>服务器A检查数据包的目的IP地址，发现目的IP与自己的IP地址相同。<br>服务器A剥掉数据包的IP头部后，会送往上层协议TCP继续进行处理。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">服务器A通过<span class="hljs-built_in">IP</span>协议来处理该报文，首先会通过校验和字段来验证报文头的完整性，然后检查<span class="hljs-built_in">IP</span>报文头中的目的<span class="hljs-built_in">IP</span>地址是否与自己当前的<span class="hljs-built_in">IP</span>地址匹配。<br>如果在源与目的之间的数据传输期间数据发生了报文分片，则报文会被目的端重新组合。标识字段用于标识属于同一数据源的分片报文，偏移量表示该分片在原分组中的相对位置。标志字段目前只有两位有意义，标志字段最低位为<span class="hljs-number">1</span>，表示后面还有分片，为<span class="hljs-number">0</span>表示这已经是最后一个数据片；中间一位为<span class="hljs-number">1</span>表示不能分片，为<span class="hljs-number">0</span>表示允许分片。所有的分片报文必须被目的端全部接收到后才会进行重新组合。<br>协议字段表示此数据包携带的上层数据是哪种协议的数据。需要注意的是，下一个报头并非总是传输层报头。例如，ICMP报文也是使用<span class="hljs-built_in">IP</span>协议封装，协议字段值为<span class="hljs-number">0x01</span>。<br></code></pre></td></tr></table></figure><h4 id="八、数据段解封装"><a href="#八、数据段解封装" class="headerlink" title="八、数据段解封装"></a>八、数据段解封装</h4><p>服务器A检查TCP头部的目的端口，然后将数据段发送给应用层的HTTP协议进行处理。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">当<span class="hljs-built_in">IP</span>报文头被处理完并剥离后，数据段会被发送到传输层进行处理。在此示例中，传输层协议使用的是TCP，且发送端和接收端已经通过三次握手建立了连接。传输层收到该数据段后，TCP协议会查看并处理该数据段头部信息，其中目的端口号为<span class="hljs-number">80</span>，用于表示处理该数据的应用层协议为HTTP协议。TCP处理完头部信息后会将此数据段头部进行剥离，然后将剩下的应用数据发送到HTTP协议进行处理。<br></code></pre></td></tr></table></figure><h4 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h4><p>数据在进行二层和三层封装之前，主机需要了解哪些信息？</p><p>主机在封装数据包之前，必须要知道目的端IP地址。在封装数据帧之前，必须要知道去往目的网络的路由以及下一跳的MAC地址。</p><p>当数据帧发送到非目的主机时，非目的主机将会如何处理？</p><p>如果主机接收到一个不是发往自己的数据帧，在检验帧头中的目的MAC地址之后会丢弃该帧。</p><p>传输层如何能够准确的将数据交给特定应用？</p><p>传输层会检查TCP或UDP报文头中的目的端口号，以此来识别特定应用。</p><p> 当两台主机同时访问服务器的HTTP服务，该服务器如何区分数据属于哪个会话？</p><p>服务器可以只通过源IP地址识别两台主机的HTTP流量，另外TCP报文头中包含的源端口也可以被用来区分同一台主机通过不同的浏览器发起的不同的会话。例如，两个来自源IP为10.1.1.1的HTTP流量使用的目的端口号都是80，但源端口号为1028和1035。</p>]]></content>
    
    
    <categories>
      
      <category>信息安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机磁盘无法扩展问题解决</title>
    <link href="/2025/02/02/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%97%A0%E6%B3%95%E6%89%A9%E5%B1%95%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/02/02/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%97%A0%E6%B3%95%E6%89%A9%E5%B1%95%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>本文介绍虚拟机磁盘扩展时遇到的问题。</p><p>目前情况是：C盘已满；C盘邻居是E盘；E盘邻居是未分区的新加卷。</p><p>此时C盘想要扩展卷是无法达到的，因为未分区的磁盘不是C盘的邻居，只有相邻的才能进行扩展，意思就是目前只能对E盘进行扩展。所以此时只能将E盘进行删除。但是由于E盘上的服务正在允许，我们在命令行上执行clean命令时会出现如下报错：</p><p>虚拟磁盘服务错误: 在当前启动卷、系统卷、页面文件卷、 故障转储卷或休眠卷上不允许删除操作。</p><p>如果想清空磁盘，建议先将系统盘、启动盘、页面文件等移动到其他磁盘上，然后再执行清空操作。但这种操作可能会比较复杂，我们可以直接使用工具来清空磁盘，比如Diskgenius，EaseUS partition master等。我采用的是Diskgenius工具，直接下载打开使用。在这个工具上可以直接将E盘删除。</p><p>此时虚拟机上就只剩C盘和一个未分区的磁盘，现在就可以进行C盘扩展了。</p>]]></content>
    
    
    <categories>
      
      <category>信息安全-磁盘配额</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何上传一篇新文章</title>
    <link href="/2023/02/24/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%B0%E6%96%87%E7%AB%A0/"/>
    <url>/2023/02/24/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>首先新建一篇文章</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> 文章名字<br></code></pre></td></tr></table></figure><p>然后重新部署到GitHub上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span> -d<br></code></pre></td></tr></table></figure><p>在public目录下打开git bash</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git add .<br>将仓库文件夹中的内容都添加进来<br>git commit -m <span class="hljs-string">&quot;注释信息&quot;</span><br>将暂存区内容添加到本地仓库<br>git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br>将本地仓库推送到远程服务器（<span class="hljs-built_in">origin</span>是远程主机，master表示远程仓库和本地仓库的master分支）<br>（注:第一次推送的话此步骤需要你输入帐号和密码，接下来使用命令就可以不使用 -u了）<br></code></pre></td></tr></table></figure><p>若出现问题，可以先使用git pull命令从远程获取代码并合并本地的版本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git pull <span class="hljs-selector-attr">[远程仓库名]</span> <span class="hljs-selector-attr">[分支名]</span><br>git pull origin <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure><p>最后</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客报错汇总</title>
    <link href="/2022/11/04/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/"/>
    <url>/2022/11/04/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p><img src="D:\myblog\source\img\博客搭建报错汇总\1.png" alt="image-20241104150348082"></p><p>尝试以下几种方法：</p><p>（1）个人主页-Settings</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\2.png" alt="image-20241104150610933"></p><p>点击Disable</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\3.png" alt="image-20241104150652741"></p><p>（2）去到个人仓库-Settings-Code security，关闭Secret scanning</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\4.png"></p><p>（3）个人主页-Settings，取消勾选即可</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\5.png" alt="image-20241104151655331"></p><p><img src="D:\myblog\source\img\博客搭建报错汇总\6.png" alt="image-20241104151723263"></p><p>（4）将博客根目录的_config.yml文件中的repository修改成SSH地址，前提是要生成SSH密钥地址（自己上网搜一下教程）</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\7.png" alt="image-20241104151937932"></p><p>上面所示的方法尝试完后，输入命令：</p><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><p>如若还是不行，请在评论区留言</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Github Pages + Hexo搭建博客</title>
    <link href="/2022/11/03/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/03/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用GitHub Pages + Hexo搭建个人博客网站，完全免费，所有内容本人亲测，绝对可用。</p><h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><h5 id="1-GitHub账号"><a href="#1-GitHub账号" class="headerlink" title="1. GitHub账号"></a>1. <a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020">GitHub</a>账号</h5><p>需要有一个<code>GitHub</code>账号，没有的话到 <a href="https://github.com/">官网 </a>申请一个。<br>注册很简单，不懂的话可以参考 <a href="https://blog.csdn.net/yaorongke/article/details/119086305">GitHub申请账号</a></p><h5 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h5><p>在自己电脑上安装好<code>Git</code>，<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>部署到<code>GitHub</code>时要用。<br>网上找篇教程或者参考 <a href="https://blog.csdn.net/yaorongke/article/details/119085413">Git安装(Windows)</a></p><h5 id="3-安装NodeJS"><a href="#3-安装NodeJS" class="headerlink" title="3. 安装NodeJS"></a>3. 安装NodeJS</h5><p>在自己电脑上安装好<code>NodeJS</code>，<code>Hexo</code>是基于<code>NodeJS</code>编写的，所以需要安装<code>NodeJS</code>和<code>npm</code>工具。<br>网上找篇教程或者参考 <a href="https://blog.csdn.net/yaorongke/article/details/119084295">NodeJS安装及配置(Windows)</a></p><h4 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h4><p>在<code>GitHub</code>上创建一个新的代码仓库用于保存我们的网页。</p><p>点击<code>Your repositories</code>，进入仓库页面。<br><img src="/../img/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/1.png"><br>点击<code>New</code>按钮，进入仓库创建页面。<br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/2.png" alt="请添加图片描述"><br>填写仓库名，格式必须为<code>&lt;用户名&gt;.github.io</code>，然后点击<code>Create repository</code>。<br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/3.png" alt="请添加图片描述"><br>点击<code>creating a new file</code>创建一个新文件，作为我们网站的主页。<br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/4.png" alt="请添加图片描述"><br>新文件的名字必须为<code>index.html</code>，内容先随便写一个简单的，内容示例如下，填写之后点击<code>Commit new file</code>提交。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>yaorongke<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>yaorongke的个人主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/5.png" alt="请添加图片描述"><br>GitHub Pages中找到我们主页的地址为 <a href="https://chenqi005.github.io/">https://chenqi005.github.io/</a><br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/6.png" alt="请添加图片描述"><br>浏览器中访问，展示成功。<br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/7.png" alt="image-20241030150314631"><br>这里创建的网页是非常简陋的，只是为了演示下<code>GitHub Pages</code>的使用方式。</p><h4 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h4><p>我们采用<code>Hexo</code>来创建我们的博客网站，<code>Hexo</code> 是一个基于<code>NodeJS</code>的静态博客网站生成器，使用<code>Hexo</code>不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入 <a href="https://hexo.io/zh-cn/">官网</a>。</p><p>安装 <code>Hexo</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>创建一个项目 <code>hexo-blog</code> 并初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexo-blog<br>cd hexo-blog<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，页面默认主图风格如下">http://localhost:4000，页面默认主图风格如下</a><br><img src="https://i-blog.csdnimg.cn/blog_migrate/1fa17b1845debf8e2670ffeba4a9dee0.png" alt="请添加图片描述"></p><h4 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h4><p><code>Hexo</code> 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点 <a href="https://hexo.io/themes/">这里</a> 查看。这里介绍两个主题的使用方法，<code>Next</code> 和 <code>Fluid</code>，个人比较喜欢<code>Fluid</code>，后面章节的功能也是以 <code>Fluid</code> 为基础进行讲解的。</p><h5 id="1-NexT-主题"><a href="#1-NexT-主题" class="headerlink" title="1. NexT 主题"></a>1. NexT 主题</h5><p><strong>安装主题</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd hexo-blog<br>git clone https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p><strong>使用 NexT 主题</strong></p><p>打开 _config.yml 文件，该文件为站点配置文件<br><img src="https://i-blog.csdnimg.cn/blog_migrate/92988aea1bce3f6808d390c818ae198e.png" alt="请添加图片描述"><br>将主题修改为 next</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">theme: next<br></code></pre></td></tr></table></figure><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><h5 id="2-Fluid主题"><a href="#2-Fluid主题" class="headerlink" title="2. Fluid主题"></a>2. Fluid主题</h5><p>以下安装步骤摘自 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid官网</a></p><p><strong>安装主题</strong></p><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p><strong>指定主题</strong></p><p>如下修改 <code>Hexo</code> 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><p><strong>创建「关于页」</strong></p><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: about<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2020</span>-<span class="hljs-number">02</span>-<span class="hljs-number">23</span> <span class="hljs-number">19</span>:<span class="hljs-number">20</span>:<span class="hljs-number">33</span><br><span class="hljs-attribute">layout</span>: about<br></code></pre></td></tr></table></figure><p>这里记得在冒号后必须打一个空格，不然会报错。</p><p>接着下面写“关于页”的正文，支持 Markdown, HTML</p><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，`Fluid`主题风格页面如下">http://localhost:4000，`Fluid`主题风格页面如下</a><br><img src="https://i-blog.csdnimg.cn/blog_migrate/c740ecd3f5dac4c831d0903d1317e180.png" alt="请添加图片描述"></p><h4 id="四、创建文章"><a href="#四、创建文章" class="headerlink" title="四、创建文章"></a>四、创建文章</h4><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行如下命令创建一篇新文章，名为《测试文章》</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post 测试文章<br></code></pre></td></tr></table></figure><p>执行完成后在<code>source\_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)<br><img src="https://i-blog.csdnimg.cn/blog_migrate/bc04cff11fa1fa108c48f1e9c4fdd4ce.png" alt="请添加图片描述"></p><p>文章编辑格式如下：</p><img src="C:/Users/lenovopc/hexo-blog/source/img/test/test.png" style="zoom:60%;" /><p>如何向文章中插入图片并且能够在页面上显示？</p><p>首先在hexo-blog\source目录下新建一个img文件夹，用于存放文章中需要用到的图片。</p><p>然后使用<img>标签将图像嵌入文档即可，这里src可以填写相对路径。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;img src=<span class="hljs-string">&quot;../img/test/test.jpg&quot;</span> <span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;zoom:33%;&quot;</span> /&gt;<br>其他属性：<br>alt：包含一条对图像的文本描述，通常在图像无法加载或者用户使用辅助技术（如屏幕阅读器）时显示。<br><span class="hljs-built_in">width</span>：宽度<br><span class="hljs-built_in">height</span>：高度<br><span class="hljs-built_in">title</span>：这个属性用于提供有关图像的额外信息，通常在鼠标悬停在图像上时显示为工具提示。<br><span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;zoom:xx%;&quot;</span>：进行缩放<br></code></pre></td></tr></table></figure><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，页面如下，文章添加成功">http://localhost:4000，页面如下，文章添加成功</a><br><img src="C:/Users/lenovopc/hexo-blog/source/img/test/test1.png" style="zoom:60%;" /></p><h4 id="五、个性化页面展示"><a href="#五、个性化页面展示" class="headerlink" title="五、个性化页面展示"></a>五、个性化页面展示</h4><p>页面的标题等位置显示默认的文字，可以改下显示一些个性化的信息。</p><h5 id="1-浏览器tab页名称"><a href="#1-浏览器tab页名称" class="headerlink" title="1. 浏览器tab页名称"></a>1. 浏览器tab页名称</h5><p>修改根目录下 <code>_config.yml</code> 中的 <code>title</code> 字段。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/9f5d2682398a9bf2dd3d22300d1bfa34.png" alt="请添加图片描述"></p><h5 id="2-博客标题"><a href="#2-博客标题" class="headerlink" title="2. 博客标题"></a>2. 博客标题</h5><p>主题目录 <code>themes\fluid</code> 下 <code>_config.yml</code> 中的 <code>blog_title</code> 字段。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/90a3f984cd9e7fa62c5edf7140968163.png" alt="请添加图片描述"></p><h5 id="3-主页正中间的文字"><a href="#3-主页正中间的文字" class="headerlink" title="3. 主页正中间的文字"></a>3. 主页正中间的文字</h5><p>主题目录 <code>themes\fluid</code> 下 <code>_config.yml</code> 中的 <code>text</code> 字段。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d1d671af5913fc79fceeef00ef91e2bc.png" alt="请添加图片描述"><br>修改好配置后，页面效果如下，可以看到现在显示的内容变成了我们的个人信息。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f72cdf670c6cf0e0fbee7becf93e9292.png" alt="请添加图片描述"></p><h4 id="六、添加阅读量统计"><a href="#六、添加阅读量统计" class="headerlink" title="六、添加阅读量统计"></a>六、添加阅读量统计</h4><p><code>Fluid</code> 主题写好了统计阅读量的代码，但是缺少相应配置所以没有开启，需要借助三方服务来统计阅读量，这里是有 <code>Leancloud</code> 的免费服务来进行统计。</p><h5 id="1-申请LeanCloud账号并创建应用"><a href="#1-申请LeanCloud账号并创建应用" class="headerlink" title="1. 申请LeanCloud账号并创建应用"></a>1. 申请LeanCloud账号并创建应用</h5><p>进入 <a href="https://console.leancloud.cn/">官网</a> 注册账号<br><img src="https://i-blog.csdnimg.cn/blog_migrate/a428fe73847ed99303fe3b5013b256f4.png" alt="请添加图片描述"><br>需实名认证，完成后才能使用各项服务<br><img src="https://i-blog.csdnimg.cn/blog_migrate/05ed44aeccc043fbb0b9e16caea84801.png" alt="请添加图片描述"><br>验证邮箱<br><img src="https://i-blog.csdnimg.cn/blog_migrate/2f5e9021aebdb7c2bc08f22e0676b89f.png" alt="请添加图片描述"><br>创建应用，选择<code>开发版</code>即可，免费的<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c1017a718b6bb23826d7cc1ccf919990.png" alt="请添加图片描述"><br>进入该应用的 <code>设置-&gt;应用凭证</code>，找到 <code>AppID</code> 和 <code>AppKey</code>，记录下来后面配置要用<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f87d88766a4ecd13a5f58b79bcc8b65b.png" alt="请添加图片描述"></p><h5 id="2-修改Fluid配置"><a href="#2-修改Fluid配置" class="headerlink" title="2. 修改Fluid配置"></a>2. 修改Fluid配置</h5><p>打开主题目录 <code>themes\fluid</code>下的 <code>_config.yml</code> 文件，修改如下配置</p><h6 id="单篇文章阅读量计数"><a href="#单篇文章阅读量计数" class="headerlink" title="单篇文章阅读量计数"></a>单篇文章阅读量计数</h6><p>打开统计开关<br><img src="https://i-blog.csdnimg.cn/blog_migrate/a031a8e85bcf012bfad1ec3becf022da.png" alt="请添加图片描述"><br>配置 <code>leancloud</code>的 <code>app_id</code> 和 <code>app_key</code><br><img src="https://i-blog.csdnimg.cn/blog_migrate/300f300c219f964dd9ba6ef14cdab59d.png" alt="请添加图片描述"><br>打开计数功能，统计来源改为 <code>leancloud</code><br><img src="https://i-blog.csdnimg.cn/blog_migrate/796283f28fbff5f9b91360397c826b77.png" alt="请添加图片描述"><br>页面效果<br><img src="https://i-blog.csdnimg.cn/blog_migrate/a6db78c41b487482be1977e36b64b907.png" alt="请添加图片描述"></p><h6 id="页面底部展示网站的-PV、UV-统计数"><a href="#页面底部展示网站的-PV、UV-统计数" class="headerlink" title="页面底部展示网站的 PV、UV 统计数"></a>页面底部展示网站的 PV、UV 统计数</h6><p><img src="https://i-blog.csdnimg.cn/blog_migrate/70139f6941117c66be425475ca5c65c7.png" alt="请添加图片描述"><br>页面效果<br><img src="https://i-blog.csdnimg.cn/blog_migrate/92a20c061c5feabccc668810a38926b2.png" alt="请添加图片描述"></p><h4 id="七、添加评论功能"><a href="#七、添加评论功能" class="headerlink" title="七、添加评论功能"></a>七、添加评论功能</h4><p>评论功能的代码已经写好了，只不过没有开启，需要修改一些配置</p><p>打开主题目录 <code>themes\fluid</code>下的 <code>_config.yml</code> 文件，修改如下配置</p><p>启用评论插件<br><img src="https://i-blog.csdnimg.cn/blog_migrate/3156e87e87fd3e2f4ba858bfb7bf098f.png" alt="请添加图片描述"><br>配置 <code>LeanCloud</code> 的 <code>appId</code> 和 <code>appkey</code><br><img src="https://i-blog.csdnimg.cn/blog_migrate/820f3cb524e7e73ae7042893cc5a38a6.png" alt="请添加图片描述"><br>重新部署后，查看页面效果，评论功能已开启<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0b00f4e78c1d058163d89a80431d3954.png" alt="请添加图片描述"><br>部署在本地时评论无法提交，会报跨域问题，发布到 <code>GitHub Pages</code> 上之后课正常提交评论</p><h4 id="八、发布到GitHub-Pages"><a href="#八、发布到GitHub-Pages" class="headerlink" title="八、发布到GitHub Pages"></a>八、发布到GitHub Pages</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>安装hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p>修改根目录下的 <code>_config.yml</code>，配置 <code>GitHub</code> 相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/chenqi005/chenqi005.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">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</span><br><br></code></pre></td></tr></table></figure><p>其中 <code>token</code> 为 <code>GitHub</code> 的 <code>Personal access tokens</code>，获取方式如下图：</p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20241030202536126.png" alt="image-20241030202536126"></p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20241030202518158.png" alt="image-20241030202518158"></p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20241030202319295.png" alt="image-20241030202319295"></p><p>部署到GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="https://yaorongke.github.io/%EF%BC%8C%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F">https://yaorongke.github.io/，部署成功</a><br><img src="https://i-blog.csdnimg.cn/blog_migrate/00ef2fb7c3fd72101036c976ac78dc09.png" alt="请添加图片描述"></p><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>直接将 <code>public</code> 目录中的文件和目录推送至 <code>GitHub</code> 仓库和分支中。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d8f74b8200026dee4bd2939fb4c5aacb.png" alt="请添加图片描述"></p><h4 id="九、发布到自己服务器，Nginx代理"><a href="#九、发布到自己服务器，Nginx代理" class="headerlink" title="九、发布到自己服务器，Nginx代理"></a>九、发布到自己服务器，Nginx代理</h4><p>如果自己有服务器的话，也可以不使用 <code>GitHub Pages</code>，直接部署的自己的服务器上，通过 <code>Nginx</code> 进行代理，我这里有一个阿里云上的 <code>CentOS 7</code> 版的 <code>Linux</code> 服务器，演示下如何部署，步骤如下。</p><p>打开 <code>hexo-blog</code> 根目录下的 <code>_config.yml</code>，增加如下配置，这是因为把网站存放在了子目录中，要和 <code>Nginx</code> 配置中的 <code>location /blog</code> 路径一致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root: /blog<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p><code>hexo-blog</code> 根目录下执行打包命令，打包好的文件在 <code>public</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p>将<code>public</code> 目录下的文件复制到 <code>Linux</code> 服务器上的某个目录下，我的存放目录为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/rkyao/fronted/hexo-blog<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p>修改 <code>Nginx</code> 配置文件，我的 <code>Nginx</code> 安装路径为 <code>/usr/local</code>，大家根据自己实际情况调整</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/conf<br>vim nginx.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">server节点下添加如下配置</span><br>location /blog &#123;<br>    alias  /opt/rkyao/fronted/hexo-blog;<br>    index  index.html index.htm;<br>&#125;<br><br> <br> <br> <br> 12345671234567<br></code></pre></td></tr></table></figure><p>重启 <code>Nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br>./nginx -s reload<br><br> <br> <br> <br> 1212<br></code></pre></td></tr></table></figure><p>访问博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://47.96.106.173/blog/<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><h4 id="十、最终效果展示"><a href="#十、最终效果展示" class="headerlink" title="十、最终效果展示"></a>十、最终效果展示</h4><p>可访问如下地址查看<br><a href="https://yaorongke.github.io/">https://yaorongke.github.io/</a></p><p>转载：<a href="https://blog.csdn.net/yaorongke/article/details/119089190?utm_medium=distribute.pc_feed_v2.none-task-blog-hot-10.pc_personrecdepth_1-utm_source=distribute.pc_feed_v2.none-task-blog-hot-10.pc_personrec">https://blog.csdn.net/yaorongke/article/details/119089190?utm_medium=distribute.pc_feed_v2.none-task-blog-hot-10.pc_personrecdepth_1-utm_source=distribute.pc_feed_v2.none-task-blog-hot-10.pc_personrec</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
