<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第一阶段：网络安全模块</title>
    <link href="/2025/02/25/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/"/>
    <url>/2025/02/25/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="第1阶段-网络安全模块"><a href="#第1阶段-网络安全模块" class="headerlink" title="第1阶段 网络安全模块"></a>第1阶段 网络安全模块</h1><h2 id="协议基础"><a href="#协议基础" class="headerlink" title="协议基础"></a>协议基础</h2><h3 id="企业网络架构介绍"><a href="#企业网络架构介绍" class="headerlink" title="企业网络架构介绍"></a>企业网络架构介绍</h3><h4 id="一、企业网络分类"><a href="#一、企业网络分类" class="headerlink" title="一、企业网络分类"></a>一、企业网络分类</h4><p>公司网络：比较注重成本</p><p>教育网络：省、市教育局连接</p><p>政府网络：稳定、安全性（保密性）高</p><p>金融网络：时效性、安全性</p><p>如何实现企业网络的远程互联呢？</p><ul><li>专线</li><li>VPN</li></ul><h4 id="二、企业网络架构"><a href="#二、企业网络架构" class="headerlink" title="二、企业网络架构"></a>二、企业网络架构</h4><p>企业的网络架构主要分为两种，一种是适用于小型企业的扁平化的企业架构，另一种则是适用于中大型企业的层次化的企业架构。</p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20240910195000619.png" alt="image-20240910195000619"></p><p>1、扁平化的企业架构</p><p>一般来说，网络终端接入数量比较少，且对网络要求比较低时，会选择扁平化的企业结构。</p><p>优点：部署简单（结构简单），成本低（设备比较少）</p><p>缺点：（1）扩展性差；</p><p>​（2）可靠性低，容易出现单点故障（可以使用双出口的方式解决，选择两个供应商）；</p><p>​（3）流量瓶颈；</p><p>名词解释：</p><p>​（1）单点故障：无线路由器连接到运营商的链路出现故障，即使终端显示信号是满格的，也无法连接到网络。</p><p>​（2）流量瓶颈：设备存在吞吐量的限制（每秒能够收发多少数据），当连接的终端数量较大时，带宽相对来说就被限制了。</p><p>2、层次化的企业架构</p><p>当公司对网络的要求比较高时，会选择层次化的企业架构</p><p>层次：</p><p>​（1）终端：通信的发起或接收的设备，PC、IP电话、平板、服务器等</p><p>​（2）接入层：将终端的设备连接到网络中（在此层扩展）</p><p>​（3）汇聚层（非必要）：将接入层的流量汇聚起来，方便做流量控制</p><p>​（4）核心层：负责数据的高速转发、对设备性能要求高。</p><p>优点：</p><p>​（1）可靠性好：多台设备、多条链路，导致冗余性很好，终端可以通过多条链路收发数据</p><p>​（2）方便排障：因为网络有分层，所以可以做到故障的分层排查</p><p>​（3）扩展性好：如果要增加终端的接入，可以在接入层多加一台交换机</p><p>缺点：成本高、架构复杂、需要专员进行网络的维护</p><h4 id="三、网络的组成和结构"><a href="#三、网络的组成和结构" class="headerlink" title="三、网络的组成和结构"></a>三、网络的组成和结构</h4><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20240910203307373.png" alt="image-20240910203307373"></p><p>终端设备：PC ipad iphone ATM提款机 公交卡收费端 汽车导航</p><p>网络互联设备：集线器、交换机、路由器、防火墙、IDS、IPS、ICG、AC、基站</p><p>用于连接设备的链路&#x2F;介质：同轴电缆，双绞线，光纤，无线</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">计算机网络的最终目的是实现资源的共享<br></code></pre></td></tr></table></figure><h3 id="传输介质简介"><a href="#传输介质简介" class="headerlink" title="传输介质简介"></a>传输介质简介</h3><h4 id="一、简单网络"><a href="#一、简单网络" class="headerlink" title="一、简单网络"></a>一、简单网络</h4><p>两个终端，用一条能承载数据传输的物理介质（也称为传输介质）连接起来，就组成了一个最简单的网络</p><h4 id="二、介质"><a href="#二、介质" class="headerlink" title="二、介质"></a>二、介质</h4><h5 id="1、同轴电缆"><a href="#1、同轴电缆" class="headerlink" title="1、同轴电缆"></a>1、同轴电缆</h5><table><thead><tr><th>以太网标准</th><th>电缆类别</th><th>最长有效传输距离</th></tr></thead><tbody><tr><td>10BASE5</td><td>粗同轴电缆</td><td>500米</td></tr><tr><td>10BASE2</td><td>细同轴电缆</td><td>185米</td></tr></tbody></table><p>同轴电缆是一种早期使用的传输介质，同轴电缆的标准分为两种，10BASE2和10BASE5。这两种标准都支持10Mbps的传输速率，最长传输距离分别为185米和500米。</p><h5 id="2、双绞线"><a href="#2、双绞线" class="headerlink" title="2、双绞线"></a>2、双绞线</h5><p>与同轴电缆相比双绞线（Twisted Pair）具有更低的制造和部署成本，因此在企业网络中被广泛应用。双绞线可分为屏蔽双绞线(Shielded Twisted Pair，STP)和非屏蔽双绞线(Unshielded Twisted Pair，UTP)。屏蔽双绞线在双绞线与外层绝缘封套之间有一个金属屏蔽层，可以屏蔽电磁干扰。</p><p>双绞线有很多种类型，不同类型的双绞线所支持的传输速率一般也不相同。例如，3类双绞线支持10Mbps传输速率；5类双绞线支持100Mbps传输速率；超5类双绞线及更高级别的双绞线支持千兆以太网传输。</p><h5 id="3、光纤"><a href="#3、光纤" class="headerlink" title="3、光纤"></a>3、光纤</h5><p>双绞线和同轴电缆传输数据时使用的是电信号，而光纤传输数据时使用的是光信号。光纤支持的传输速率包括10Mbps，100Mbps，1Gbps，10Gbps，甚至更高。</p><p>根据光纤传输光信号模式的不同，光纤又可分为单模光纤和多模光纤。单模光纤只能传输一种模式的光，不存在模间色散，因此适用于长距离高速传输。多模光纤允许不同模式的光在一根光纤上传输，由于模间色散较大而导致信号脉冲展宽严重，因此多模光纤主要用于局域网中的短距离传输。</p><h5 id="4、串口电缆"><a href="#4、串口电缆" class="headerlink" title="4、串口电缆"></a>4、串口电缆</h5><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250224142432372.png" alt="image-20250224142432372"></p><h4 id="三、双工模式"><a href="#三、双工模式" class="headerlink" title="三、双工模式"></a>三、双工模式</h4><p>半双工模式：通信双方都能发送和接收数据，但不能同时进行。</p><p>全双工模式：通信双方都能同时接收和发送数据。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">以太网上的通信模式包括半双工和全双工两种：<br>半双工模式下，共享物理介质的通信双方必须采用CSMA/<span class="hljs-built_in">CD</span>机制来避免冲突。<br></code></pre></td></tr></table></figure><h4 id="四、冲突域"><a href="#四、冲突域" class="headerlink" title="四、冲突域"></a>四、冲突域</h4><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250224161239604.png" alt="image-20250224161239604"></p><p>共享式网络中可能会出现信号冲突现象。解决方法：CSMA&#x2F;CD机制</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">共享式网络中，不同的主机同时发送数据时，就会产生信号冲突的问题，解决这一问题的方法一般是采用载波侦听多路访问/冲突检测技术。<br></code></pre></td></tr></table></figure><h4 id="五、CSMA-CD机制"><a href="#五、CSMA-CD机制" class="headerlink" title="五、CSMA&#x2F;CD机制"></a>五、CSMA&#x2F;CD机制</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">CSMA/<span class="hljs-built_in">CD</span>机制是一种在共享式网络上检测并避免冲突的机制<br></code></pre></td></tr></table></figure><p>CSMA&#x2F;CD的基本工作过程如下：</p><p>终端设备不停地检测共享线路的状态。如果线路空闲，则可以发送数据；如果线路不空闲，则等待一段时间后继续检测（延时时间由退避算法决定）。<br>如果有另外一个设备同时发送数据，两个设备发送的数据会产生冲突。<br>终端设备检测到冲突之后，会马上停止发送自己的数据，并发送特殊阻塞信息，以强化冲突信号，使线路上其他站点能够尽早检测到冲突。<br>终端设备检测到冲突后，等待一段时间之后再进行数据发送（延时时间由退避算法决定）。<br>CSMA&#x2F;CD的工作原理可简单总结为：先听后发，边发边听，冲突停发，随机延迟后重发。</p><h3 id="以太帧结构"><a href="#以太帧结构" class="headerlink" title="以太帧结构"></a>以太帧结构</h3><h4 id="一、网络通信协议模型"><a href="#一、网络通信协议模型" class="headerlink" title="一、网络通信协议模型"></a>一、网络通信协议模型</h4><p>网络通信中，协议和标准这两个词汇常常可以混用。一般地，关注于逻辑数据关系的协议通常被称为上层协议，而关注于物理数据流的协议通常被称为低层协议。</p><p>IEEE 802就是一套用来管理物理数据流在局域网中传输的标准，包括在局域网中传输物理数据的802.3以太网标准，还有一些用来管理物理数据路在使用串行介质的广域网中传输的标准，比如帧中继FR，高级数据链路控制HDLC，异步传输模式ATM。</p><h4 id="二、OSI国际互连"><a href="#二、OSI国际互连" class="headerlink" title="二、OSI国际互连"></a>二、OSI国际互连</h4><p>OSI开放系统互连参考模型，是由ISO国际标准化组织定义的，是模型不是协议，常用来分析和设计网络体系结构。</p><p>OSI模型的目的：规范不同系统的互连标准，使两个不同的系统能够较容易的通信而不需要改变低层的硬件或软件的逻辑。</p><p>OSI七层：物理层 数据链路层 网络层 传输层 会话层 表示层 应用层</p><p>OSI的优点：</p><p>将网络的通信过程划分为小一些、简单一些的部件，因此有助于各个部件的开发、设计和故障排除</p><p>通过网络组件的标准化，允许多个供应商进行开发</p><p>通过定义在模型的每一层实现什么功能，鼓励产业的标准化</p><p>允许各种类型的网络硬件和软件相互通信</p><p>防止对某一层所做的改动影响到其他的层，这样就有利于开发</p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250224201134851.png" alt="image-20250224201134851"></p><h4 id="三、数据封装"><a href="#三、数据封装" class="headerlink" title="三、数据封装"></a>三、数据封装</h4><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250224203942932.png" alt="image-20250224203942932"></p><p>应用数据需要经过TCP&#x2F;IP每一层处理之后才能通过网络传输到目的端，每一层上都使用该层的协议数据单元PDU彼此交换信息。</p><p>上层数据在传输层添加TCP报头后得到的PDU被称为Segment（数据段）；数据段被传递给网络层，网络层添加IP报头得到的PDU被称为Packet（数据包）；数据包被传递到数据链路层，封装数据链路层报头得到的PDU被称为Frame（数据帧）；最后，帧被转换为比特，通过网络介质传输。这种协议栈逐层向下传递数据，并添加报头和报尾的过程称为封装。</p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250224204520471.png" alt="image-20250224204520471"></p><p>数据传输过程</p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250224204546879.png" alt="image-20250224204546879"></p><p>数据包在以太网物理介质上传播之前必须封装头部和尾部信息，封装后的数据包称为数据帧，数据帧中封装的信息决定了数据如何传输。以太网上传输的数据帧有两种格式，选择哪种格式由TCP&#x2F;IP协议簇中的网络层决定。</p><h4 id="四、帧格式"><a href="#四、帧格式" class="headerlink" title="四、帧格式"></a>四、帧格式</h4><p>以太网上使用两种标准帧格式。第一种是上世纪80年代初提出的DIX v2格式，即Ethernet II帧格式。Ethernet II后来被IEEE 802标准接纳，并写进了IEEE 802.3x-1997的3.2.6节。第二种是1983年提出的IEEE 802.3格式。这两种格式的主要区别在于Ethernet II格式中包含一个Type字段，标识以太帧处理完成之后将被发送到哪个上层协议进行处理，IEEE 802.3格式中，同样的位置是长度字段。</p><p>不同的Type字段值可以用来区别这两种帧的类型，当Type字段值小于等于1500（或者十六进制的0x05DC）时，帧使用的是IEEE 802.3格式。当Type字段值大于等于1536 （或者十六进制的0x0600）时，帧使用的是Ethernet II格式。以太网中大多数的数据帧使用的是Ethernet II格式。</p><p>以太帧中还包括源和目的MAC地址，分别代表发送者的MAC和接收者的MAC，此外还有帧校验序列字段，用于检验传输过程中帧的完整性。</p><h4 id="五、Ethernet-II帧格式"><a href="#五、Ethernet-II帧格式" class="headerlink" title="五、Ethernet_II帧格式"></a>五、Ethernet_II帧格式</h4><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250224210938153.png" alt="image-20250224210938153"></p><p>Ethernet_II 帧类型值大于等于1536 (0x0600)。</p><p>以太网数据帧的长度在64-1518字节之间。</p><p>Type字段的作用即用来表明上层使用的协议。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">Ethernet_II的帧中各字段说明如下：<br>DMAC（Destination <span class="hljs-keyword">MAC</span>）是目的<span class="hljs-keyword">MAC</span>地址。DMAC字段长度为6个字节，标识帧的接收者。<br>SMAC（Source <span class="hljs-keyword">MAC</span>）是源<span class="hljs-keyword">MAC</span>地址。SMAC字段长度为6个字节，标识帧的发送者。<br>类型字段（<span class="hljs-keyword">Type</span>）用于标识数据字段中包含的高层协议，该字段长度为2个字节。类型字段取值为0x0800的帧代表IP协议帧；类型字段取值为0x0806的帧代表ARP协议帧。<br>数据字段（Data）是网络层数据，最小长度必须为46字节以保证帧长至少为64字节，数据字段的最大长度为1500字节。<br>循环冗余校验字段（FCS）提供了一种错误检测机制。该字段长度为4个字节。<br></code></pre></td></tr></table></figure><h4 id="六、数据帧传输"><a href="#六、数据帧传输" class="headerlink" title="六、数据帧传输"></a>六、数据帧传输</h4><p>数据链路层基于MAC地址进行帧的传输。</p><p>以太网在二层链路上通过MAC地址来唯一标识网络设备，并且实现局域网上网络设备之间的通信。MAC地址也叫物理地址，大多数网卡厂商把MAC地址烧入了网卡的ROM中。发送端使用接收端的MAC地址作为目的地址。以太帧封装完成后会通过物理层转换成比特流在物理介质上传输。</p><h4 id="七、以太网的MAC地址"><a href="#七、以太网的MAC地址" class="headerlink" title="七、以太网的MAC地址"></a>七、以太网的MAC地址</h4><p>MAC地址由两部分组成，分别是供应商代码和序列号。其中前24位代表该供应商代码，由IEEE管理和分配。剩下的24位序列号由厂商自己分配。</p><p>如同每一个人都有一个名字一样，每一台网络设备都用物理地址来标识自己，这个地址就是MAC地址。网络设备的MAC地址是全球唯一的。MAC地址长度为48比特，通常用十六进制表示。MAC地址包含两部分：前24比特是组织唯一标识符（OUI，Organizationally Unique Identifier），由IEEE统一分配给设备制造商。例如，华为的网络产品的MAC地址前24比特是0x00e0fc。后24位序列号是厂商分配给每个产品的唯一数值，由各个厂商自行分配（这里所说的产品可以是网卡或者其他需要MAC地址的设备）。</p><p>MAC地址的工作范围只在链路层面上，在一个LAN里面。</p><h4 id="八、网络通信"><a href="#八、网络通信" class="headerlink" title="八、网络通信"></a>八、网络通信</h4><h5 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h5><p>局域网上的帧可以通过三种方式发送。第一种是单播，指从单一的源端发送到单一的目的端。每个主机接口由一个MAC地址唯一标识，MAC地址的OUI中，第一字节第8个比特表示地址类型。对于主机MAC地址，这个比特固定为0，表示目的MAC地址为此MAC地址的帧都是发送到某个唯一的目的端。在冲突域中，所有主机都能收到源主机发送的单播帧，但是其他主机发现目的地址与本地MAC地址不一致后会丢弃收到的帧，只有真正的目的主机才会接收并处理收到的帧。</p><h5 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h5><p>第二种发送方式是广播，表示帧从单一的源发送到共享以太网上的所有主机。广播帧的目的MAC地址为十六进制的FF:FF:FF:FF:FF:FF，所有收到该广播帧的主机都要接收并处理这个帧。<br>广播方式会产生大量流量，导致带宽利用率降低，进而影响整个网络的性能。当需要网络中的所有主机都能接收到相同的信息并进行处理的情况下，通常会使用广播方式。</p><h5 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h5><p>第三种发送方式为组播，组播比广播更加高效。组播转发可以理解为选择性的广播，主机侦听特定组播地址，接收并处理目的MAC地址为该组播MAC地址的帧。<br>组播MAC地址和单播MAC地址是通过第一字节中的第8个比特区分的。组播MAC地址的第8个比特为1，而单播MAC地址的第8个比特为0。<br>当需要网络上的一组主机（而不是全部主机）接收相同信息，并且其他主机不受影响的情况下通常会使用组播方式。</p><h4 id="九、数据帧的发送和接收"><a href="#九、数据帧的发送和接收" class="headerlink" title="九、数据帧的发送和接收"></a>九、数据帧的发送和接收</h4><p>帧从主机的物理接口发送出来后，通过传输介质传输到目的端。共享网络中，这个帧可能到达多个主机。</p><p>主机检查帧头中的目的MAC地址，如果目的MAC地址不是本机MAC地址，也不是本机侦听的组播或广播MAC地址，则主机会丢弃收到的帧。如果目的MAC地址是本机MAC地址，则接收该帧，检查帧校验序列（FCS）字段，并与本机计算的值对比来确定帧在传输过程中是否保持了完整性。如果帧的FCS值与本机计算的值不同，主机会认为帧已被破坏，并会丢弃该帧。如果该帧通过了FCS校验，则主机会根据帧头部中的Type字段来确定将帧发送给上层哪个协议处理。</p><h4 id="十、上层协议类型"><a href="#十、上层协议类型" class="headerlink" title="十、上层协议类型"></a>十、上层协议类型</h4><p>在剥掉帧的头部和尾部之前，网络设备需要根据帧头中Type字段确定下一步将帧发送到哪个上层协议进行处理。</p><p>类型字段取值为0x0800的帧代表IP协议帧；类型字段取值为0x0806的帧代表ARP协议帧。</p><h3 id="IP编址"><a href="#IP编址" class="headerlink" title="IP编址"></a>IP编址</h3><p>IPV4地址由32位二进制数组成，这些位被划分为4个字节，中间用“.”号隔开，每组8位，以十进制数形式表示。分为<strong>网络地址</strong>和<strong>主机地址</strong>两个部分。</p><p>IP地址：192.168.1.1  子网掩码：255.255.255.0</p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250225170714129.png" alt="image-20250225170714129"></p><p>通过子网掩码来判断哪一部份是网络位，哪一部份是主机位。全1的部份是网络位，全0的部份是主机位。</p><p>网络号：192.168.1.0   当前网络的第一个地址，不能配置给主机</p><p>广播号：192.168.1.255  当前网络的最后一个地址，不能配置给主机</p><p>可用地址范围：192.168.1.1–192.168.1.254</p><h4 id="一、IP报文头部"><a href="#一、IP报文头部" class="headerlink" title="一、IP报文头部"></a>一、IP报文头部</h4><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250225165157241.png" alt="image-20250225165157241"></p><p>IP报文头部信息用于指导网络设备对报文进行路由和分片。同一个网段内的数据转发通过链路层即可实现，而跨网段的数据转发需要使用网络设备的路由功能。</p><p>分片是指数据包超过一定长度时，需要被划分成不同的片段使其能够在网络中传输。</p><p>IP报文头部长度为20到60字节，报文头中的信息可以用来指导网络设备如何将报文从源设备发送到目的设备。其中，版本字段表示当前支持的IP协议版本，当前的版本号为4。DS字段早期用来表示业务类型，现在用于支持QoS中的差分服务模型，实现网络流量优化。源和目的IP地址是分配给主机的逻辑地址，用于在网络层标识报文的发送方和接收方。根据源和目的IP地址可以判断目的端是否与发送端位于同一网段，如果二者不在同一网段，则需要采用路由机制进行跨网段转发。</p><h4 id="二、IP包分片"><a href="#二、IP包分片" class="headerlink" title="二、IP包分片"></a>二、IP包分片</h4><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250225170112200.png" alt="image-20250225170112200"></p><p>标识符字段（identification）用于识别属于同一个数据包的分片，以区别于同一主机或其他主机发送的其它数据包分片，保证分片被正确的重新组合。</p><p>标志字段（flags）用于判断是否已经收到最后一个分片（最后一个为0、其他为1）</p><p>片偏移字段（fragment offset）表示每个分片在原始报文中的位置</p><h4 id="三、IP地址分类"><a href="#三、IP地址分类" class="headerlink" title="三、IP地址分类"></a>三、IP地址分类</h4><h5 id="A类网络地址范围（0开头）"><a href="#A类网络地址范围（0开头）" class="headerlink" title="A类网络地址范围（0开头）"></a>A类网络地址范围（0开头）</h5><p>第一个字节的第一位必须为0，第一个字节的取值为0-127。即：0xxxxxxx   取值范围是：<em><strong>0</strong></em>0000000－<strong>0</strong>1111111（0－127）</p><p>A类地址的子网掩码是：255.0.0.0，也就第一个字节是网络位，后3个字节为主机位。</p><p><strong>举例：</strong>1.1.1.1  255.0.0.0 </p><p>网络号（标识地址具体在哪个网络）：1.0.0.0</p><p>广播地址：1.255.255.255</p><p>在这网络中有多少个地址呢？224</p><p>有效地址（可以配置给主机的地址）：224-2</p><p>可用地址范围：1.0.0.1–1.255.255.254</p><h5 id="B类网络地址转换（10开头）"><a href="#B类网络地址转换（10开头）" class="headerlink" title="B类网络地址转换（10开头）"></a>B类网络地址转换（10开头）</h5><p>第一个字节的第一位必须是1，且第二位必须是0，第一个字节的取值为<strong>128－191</strong>。即：<strong>1</strong>0000000  取值范围是：<strong>10</strong>000000－<strong>10</strong>111111（128－191）</p><p>B类地址的子网掩码是：255.255.0.0，也就前两个字节是网络位，后2个字节为主机位。</p><p>举例：181.1.1.1  255.255.0.0</p><p>网络地址：181.1.0.0</p><p>广播地址：181.1.255.255</p><p>有效地址：216-2  </p><p>可用地址范围：181.1.0.1—-181.1.255.254</p><h5 id="C类网络地址转换（110开头）"><a href="#C类网络地址转换（110开头）" class="headerlink" title="C类网络地址转换（110开头）"></a>C类网络地址转换（110开头）</h5><p>第一个字节的前两位必须是1，且第三位必须是0，第一个字节的取值为<strong>192－223</strong>。即：<strong>110</strong>00000  取值范围是：<strong>110</strong>00000－11011111（192－223）</p><p>C类地址的子网掩码是：255.255.255.0，也就前三个字节是网络位，最后1个字节为主机位。</p><p>举例：192.168.1.1  255.255.255.0</p><p>网络地址：192.168.1.0  </p><p>广播地址：192.168.1.255</p><p>有效地址：28-2  </p><p>有效地址范围：192.168.1.1–192.168.1.254</p><h5 id="D类网络的地址范围"><a href="#D类网络的地址范围" class="headerlink" title="D类网络的地址范围"></a>D类网络的地址范围</h5><p>第一个字节为224–239，用作组播地址。</p><h5 id="E类网络的地址范围"><a href="#E类网络的地址范围" class="headerlink" title="E类网络的地址范围"></a>E类网络的地址范围</h5><p>第一个字节为240–255，用于科学用途。</p><h5 id="私有IP地址范围"><a href="#私有IP地址范围" class="headerlink" title="私有IP地址范围"></a>私有IP地址范围</h5><p>在公网中是不能路由的，必须经过地址转换。</p><p>A类　10.0.0.0~10.255.255.255</p><p>B类    172.16.0.0~172.31.255.255</p><p>C类    192.168.0.0~192.168.255.255</p><h5 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h5><p>环回地址：127.0.0.0~127.255.255.255，用于诊断网络是否正常。</p><p>任何网络：0.0.0.0</p><p>广播地址255.255.255.255</p><h4 id="四、子网划分"><a href="#四、子网划分" class="headerlink" title="四、子网划分"></a>四、子网划分</h4><p>子网划分的核心思想：“借用”主机位 来“制造”新的“网络”</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">引入：<br><span class="hljs-number">10.1.1.1</span> <span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>         <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">8</span><br><span class="hljs-number">172.16.1.1</span> <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>     <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">16</span><br><span class="hljs-number">192.168.1.1</span> <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span><br>C类地址的子网划分：<br>怎么划分呢？向主机位借位，借了几位就表示该网络被划分成了<span class="hljs-number">2</span>的几次方个网络。<br></code></pre></td></tr></table></figure><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-number">1.</span>你所选择的子网掩码将会产生多少个子网?<br><span class="hljs-number">2</span>的<span class="hljs-variable language_">x</span>次方（<span class="hljs-variable language_">x</span>：子网位数）<br><span class="hljs-number">2.</span>每个子网能有多少主机?<br><span class="hljs-number">2</span>的<span class="hljs-variable language_">y</span>次方<span class="hljs-number">-2</span>（<span class="hljs-variable language_">y</span>：主机位数）<br><span class="hljs-number">3.</span>有效子网（块大小）?<br>块大小=<span class="hljs-number">2</span>的<span class="hljs-variable language_">y</span>次方（<span class="hljs-variable language_">y</span>：主机位数）<br>(结果叫做block size 或base number)<br><span class="hljs-number">4.</span>每个子网的广播地址是?<br>主机位全为<span class="hljs-number">1</span>。（广播地址=下个子网号<span class="hljs-number">-1</span>）<br><span class="hljs-number">5.</span>每个子网的有效主机分别是?<br>忽略子网内全为<span class="hljs-number">0</span>和全为<span class="hljs-number">1</span>的地址，剩下的就是有效主机地址。<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">举例：<span class="hljs-number">192.168.1.0</span>  <span class="hljs-number">255.255.255.0</span> <br><span class="hljs-number">11111111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">10000000</span><br>向主机位借了<span class="hljs-number">1</span>位，所以该网络被划分成了<span class="hljs-number">21</span>=<span class="hljs-number">2</span>个网络。<br>子网掩码值：<span class="hljs-number">255.255.255.128</span><br>块大小：<span class="hljs-number">256-128=128</span><br>分成了哪<span class="hljs-number">2</span>个网络呢？<br>网络号：<span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">25</span><br>广播号：<span class="hljs-number">192.168.1.127</span><br>可用地址：<span class="hljs-number">192.168.1.1</span>-<span class="hljs-number">192.168.1.126</span><br>网络号：<span class="hljs-number">192.168.1.128</span>/<span class="hljs-number">25</span><br>广播号：<span class="hljs-number">192.168.1.255</span><br>可用地址：<span class="hljs-number">192.168.1.129</span>-<span class="hljs-number">192.168.1.254</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dns">计算：<span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span>    向主机位借<span class="hljs-number">4</span>位     <br><span class="hljs-number">11110000</span>  <span class="hljs-number">128+64+32+16</span> +<span class="hljs-number">0+0+0+0</span>=<span class="hljs-number">240</span><br>子网掩码：<span class="hljs-number">255.255.255.240</span> /<span class="hljs-number">28</span><br>块大小：<span class="hljs-number">256-240=16</span><br>划分了几个网络：<span class="hljs-number">2</span>^<span class="hljs-number">4</span>=<span class="hljs-number">16</span><br><span class="hljs-number">0</span>   <span class="hljs-number">16</span>   <span class="hljs-number">32</span>   <span class="hljs-number">48</span>   <span class="hljs-number">64</span>   <span class="hljs-number">80</span>   ...... <br>问题：被分成了几个网络？  <span class="hljs-number">192.168.1.73</span>在哪个网络？<br>答：<span class="hljs-number">16</span>个网络，<span class="hljs-number">192.168.1.64</span>/<span class="hljs-number">28</span><br>网络号：<span class="hljs-number">192.168.1.64</span>/<span class="hljs-number">28</span><br>广播号：<span class="hljs-number">192.168.1.79</span><br>可用地址：<span class="hljs-number">192.168.1.65</span>--<span class="hljs-number">192.168.1.78</span><br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">B类地址的子网划分：<br><span class="hljs-number">172.16.1.1</span>/<span class="hljs-number">16</span>    <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>     向主机位借<span class="hljs-number">12</span>位<br>借位后的子网掩码：<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">240</span>  <span class="hljs-number">1111</span> <span class="hljs-number">0000</span>   <span class="hljs-number">128</span>+<span class="hljs-number">64</span>+<span class="hljs-number">32</span>+<span class="hljs-number">16</span><br>块大小： <span class="hljs-number">256</span>-<span class="hljs-number">240</span>=<span class="hljs-number">16</span><br>有哪些网络呢？/<span class="hljs-number">28</span><br><span class="hljs-number">172.16.0.0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">16</span>  <span class="hljs-number">0</span>.<span class="hljs-number">32</span>  <span class="hljs-number">0</span>.<span class="hljs-number">48</span> .......<br><span class="hljs-number">172.16.1.0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">64</span>  <span class="hljs-number">1</span>.<span class="hljs-number">128</span>  <span class="hljs-number">1</span>.<span class="hljs-number">192</span><br>......<br><span class="hljs-number">172.16.255.0</span>  <span class="hljs-number">255</span>.<span class="hljs-number">64</span>  <span class="hljs-number">255</span>.<span class="hljs-number">128</span>  <span class="hljs-number">255</span>.<span class="hljs-number">192</span><br></code></pre></td></tr></table></figure><h5 id="1-子网掩码"><a href="#1-子网掩码" class="headerlink" title="1.子网掩码"></a>1.子网掩码</h5><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250225195414790.png" alt="image-20250225195414790"></p><h5 id="2-默认子网掩码"><a href="#2-默认子网掩码" class="headerlink" title="2.默认子网掩码"></a>2.默认子网掩码</h5><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250225195438498.png" alt="image-20250225195438498"></p><h5 id="3-有类路由"><a href="#3-有类路由" class="headerlink" title="3.有类路由"></a>3.有类路由</h5><p>有类路由选择：RIP1  IGRP协议</p><p>汇总以后地址是标准的A B C类地址掩码 即 255.0.0.0 255.255.0.0 255.255.255.0 (<a href="https://www.baidu.com/s?wd=%E6%9C%89%E7%B1%BB%E8%B7%AF%E7%94%B1&from=1012015a&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Y3rHTzm1c3uW6zuhmdm1bz0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EnWRsnHn1nWnd">有类路由</a>里 大类网络中 子网码必须一致 这样叫做有类路由 因为有类路由协议不传递子网码信息)</p><p><img src="file:///C:\Users\lenovopc\AppData\Local\Temp\ksohtml14008\wps1.jpg" alt="img"></p><p>有类IP编址的缺陷：在设计网络时使用有类IP地址会造成地址的浪费。</p><h5 id="4-无类路由"><a href="#4-无类路由" class="headerlink" title="4.无类路由"></a>4.无类路由</h5><p>无类路由选择：RIP2、EIGRP、OSPF等协议</p><p>汇总以后地址是无类的比如 172.16.12.0&#x2F;16 - 172.16.15.0&#x2F;16 汇总以后的地址是 172.16.12.0&#x2F;20 子码 不属于 A B C 3个类别(无类路由是相反的 他传递子网信息所有大类网络中可以使用不同的子网码)</p><p><img src="file:///C:\Users\lenovopc\AppData\Local\Temp\ksohtml14008\wps2.jpg" alt="img"></p><p><img src="file:///C:\Users\lenovopc\AppData\Local\Temp\ksohtml14008\wps3.jpg" alt="img"></p><h6 id="4-1-变长子网掩码VLSM"><a href="#4-1-变长子网掩码VLSM" class="headerlink" title="4.1.变长子网掩码VLSM"></a>4.1.变长子网掩码VLSM</h6><p>VLSM：可变长子网掩码（借用主机位）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">变长子网掩码(Variable-Length Subnet Masks,VLSM)的出现是打破传统的以类(<span class="hljs-keyword">class</span>)为标准的地址划分方法，是为了缓解<span class="hljs-symbol">IP</span>地址紧缺而产生的；<br>作用：节约<span class="hljs-symbol">IP</span>地址空间<br>注意事项：使用<span class="hljs-symbol">VLSM</span>时,所采用的路由协议必须能够支持它,这些路由协议包括<span class="hljs-symbol">RIPv2,<span class="hljs-symbol">OSPF</span>,<span class="hljs-symbol">EIGRP</span></span>和<span class="hljs-symbol">BGP</span>；<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用长度不同的子网掩码将网络划分成多个子网，适用于不同类型的网络设计，称为VLSM组网。<br></code></pre></td></tr></table></figure><h6 id="4-2-无类域间路由CIDR"><a href="#4-2-无类域间路由CIDR" class="headerlink" title="4.2.无类域间路由CIDR"></a>4.2.无类域间路由CIDR</h6><p>CIDR的概念：忽略A、B、C类网络的规则，定义前缀相同的一组网络为一个块，即一条路由条目。（如：199.0.0.0&#x2F;8）</p><p>CIDR的优点：<br>    减少了网络数目，缩小了路由选择表；<br>    从网络流量、CPU和内存方面说，开销更低；<br>    对网络进行编址时，灵活性更大；<br>    CIDR 增强了网络的可扩展性。</p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20250225202723690.png" alt="image-20250225202723690"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">无类域间路由CIDR（Classless Inter Domain Routing）由RFC1817定义。CIDR突破了传统IP地址的分类边界，将路由表中的若干条路由汇聚为一条路由，减少了路由表的规模，提高了路由器的可扩展性。<br>如上图所示，一个企业分配到了一段<span class="hljs-keyword">A</span>类网络地址，<span class="hljs-number">10.24.0.0</span>/<span class="hljs-number">22</span>。该企业准备把这些<span class="hljs-keyword">A</span>类网络分配给各个用户群，目前已经分配了四个网段给用户。如果没有实施CIDR技术，企业路由器的路由表中会有四条下连网段的路由条目，并且会把它通告给其他路由器。通过实施CIDR技术，我们可以在企业的路由器上把这四条路由<span class="hljs-number">10.24.0.0</span>/<span class="hljs-number">24，10.24.1</span>.<span class="hljs-number">0/24，10.24</span>.<span class="hljs-number">2.0/24，10</span>.<span class="hljs-number">24.3.0/24</span>汇聚成一条路由<span class="hljs-number">10.24.0.0</span>/<span class="hljs-number">22</span>。这样，企业路由器只需通告<span class="hljs-number">10.24.0.0</span>/<span class="hljs-number">22</span>这一条路由，大大减小了路由表的规模。<br></code></pre></td></tr></table></figure><p>CIDR值表：</p><table><thead><tr><th>255.0.0.0         &#x2F;8</th></tr></thead><tbody><tr><td>255.128.0.0        &#x2F;9</td></tr><tr><td>255.192.0.0        &#x2F;10</td></tr><tr><td>255.224.0.0        &#x2F;11</td></tr><tr><td>255.240.0.0        &#x2F;12</td></tr><tr><td>255.248.0.0        &#x2F;13</td></tr><tr><td>255.252.0.0        &#x2F;14</td></tr><tr><td>255.254.0.0        &#x2F;15</td></tr><tr><td>255.255.0.0        &#x2F;16</td></tr><tr><td>255.255.128.0       &#x2F;17</td></tr><tr><td>255.255.192.0       &#x2F;18</td></tr><tr><td>255.255.224.0       &#x2F;19</td></tr><tr><td>255.255.240.0      &#x2F;20</td></tr><tr><td>255.255.248.0      &#x2F;21</td></tr><tr><td>255.255.252.0      &#x2F;22</td></tr><tr><td>255.255.254.0      &#x2F;23</td></tr><tr><td>255.255.255.0      &#x2F;24</td></tr><tr><td>255.255.255.128     &#x2F;25</td></tr><tr><td>255.255.255.192     &#x2F;26</td></tr><tr><td>255.255.255.224     &#x2F;27</td></tr><tr><td>255.255.255.240     &#x2F;28</td></tr><tr><td>255.255.255.248     &#x2F;29</td></tr><tr><td>255.255.255.252     &#x2F;30</td></tr></tbody></table><h5 id="5-网关"><a href="#5-网关" class="headerlink" title="5.网关"></a>5.网关</h5><p>网关用来转发来自不同网段之间的数据包。</p><p>报文转发过程中，首先需要确定转发路径以及通往目的网段的接口，然后将报文封装在以太帧中通过指定的物理接口转发出去。如果目的主机与源主机不在同一网段，报文需要先转发到网关，然后通过网关将报文转发到目的网段。</p><p>网关是指接收并处理本地网段主机发送的报文并转发到目的网段的设备。为实现此功能，网关必须知道目的网段的IP地址。网关设备上连接本地网段的接口地址即为该网段的网关地址。</p><h4 id="六、进制之间转换"><a href="#六、进制之间转换" class="headerlink" title="六、进制之间转换"></a>六、进制之间转换</h4><table><thead><tr><th><strong>进制</strong></th><th><strong>字符范围</strong></th><th><strong>基值</strong></th></tr></thead><tbody><tr><td>二进制</td><td>0 — 1</td><td>2</td></tr><tr><td>十进制</td><td>0 — 9</td><td>10</td></tr><tr><td>十六进制</td><td>0 —9，A — F</td><td>16</td></tr></tbody></table><table><thead><tr><th>比特位</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>乘方</td><td>27</td><td>26</td><td>25</td><td>24</td><td>23</td><td>22</td><td>21</td><td>20</td></tr><tr><td>数值</td><td>128</td><td>64</td><td>32</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td></tr></tbody></table><table><thead><tr><th>十进制</th><th>二进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>00000000</td><td>00</td></tr><tr><td>1</td><td>00000001</td><td>01</td></tr><tr><td>2</td><td>00000010</td><td>02</td></tr><tr><td>3</td><td>00000011</td><td>03</td></tr><tr><td>4</td><td>00000100</td><td>04</td></tr><tr><td>5</td><td>00000101</td><td>05</td></tr><tr><td>6</td><td>00000110</td><td>06</td></tr><tr><td>7</td><td>00000111</td><td>07</td></tr><tr><td>8</td><td>00001000</td><td>08</td></tr></tbody></table><table><thead><tr><th>十进制</th><th>二进制</th><th>十六进制</th></tr></thead><tbody><tr><td>9</td><td>00001001</td><td>09</td></tr><tr><td>10</td><td>00001010</td><td>0A</td></tr><tr><td>11</td><td>00001011</td><td>0B</td></tr><tr><td>12</td><td>00001100</td><td>0C</td></tr><tr><td>13</td><td>00001101</td><td>0D</td></tr><tr><td>14</td><td>00001110</td><td>0E</td></tr><tr><td>15</td><td>00001111</td><td>0F</td></tr><tr><td>…</td><td>…</td><td>…</td></tr><tr><td>255</td><td>11111111</td><td>FF</td></tr></tbody></table><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>信息安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机磁盘无法扩展问题解决</title>
    <link href="/2025/02/02/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%97%A0%E6%B3%95%E6%89%A9%E5%B1%95%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/02/02/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%97%A0%E6%B3%95%E6%89%A9%E5%B1%95%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>本文介绍虚拟机磁盘扩展时遇到的问题。</p><p>目前情况是：C盘已满；C盘邻居是E盘；E盘邻居是未分区的新加卷。</p><p>此时C盘想要扩展卷是无法达到的，因为未分区的磁盘不是C盘的邻居，只有相邻的才能进行扩展，意思就是目前只能对E盘进行扩展。所以此时只能将E盘进行删除。但是由于E盘上的服务正在允许，我们在命令行上执行clean命令时会出现如下报错：</p><p>虚拟磁盘服务错误: 在当前启动卷、系统卷、页面文件卷、 故障转储卷或休眠卷上不允许删除操作。</p><p>如果想清空磁盘，建议先将系统盘、启动盘、页面文件等移动到其他磁盘上，然后再执行清空操作。但这种操作可能会比较复杂，我们可以直接使用工具来清空磁盘，比如Diskgenius，EaseUS partition master等。我采用的是Diskgenius工具，直接下载打开使用。在这个工具上可以直接将E盘删除。</p><p>此时虚拟机上就只剩C盘和一个未分区的磁盘，现在就可以进行C盘扩展了。</p>]]></content>
    
    
    <categories>
      
      <category>信息安全-磁盘配额</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何上传一篇新文章</title>
    <link href="/2023/02/24/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%B0%E6%96%87%E7%AB%A0/"/>
    <url>/2023/02/24/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>首先新建一篇文章</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> 文章名字<br></code></pre></td></tr></table></figure><p>然后重新部署到GitHub上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span> -d<br></code></pre></td></tr></table></figure><p>在public目录下打开git bash</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git add .<br>将仓库文件夹中的内容都添加进来<br>git commit -m <span class="hljs-string">&quot;注释信息&quot;</span><br>将暂存区内容添加到本地仓库<br>git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br>将本地仓库推送到远程服务器（<span class="hljs-built_in">origin</span>是远程主机，master表示远程仓库和本地仓库的master分支）<br>（注:第一次推送的话此步骤需要你输入帐号和密码，接下来使用命令就可以不使用 -u了）<br></code></pre></td></tr></table></figure><p>若出现问题，可以先使用git pull命令从远程获取代码并合并本地的版本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git pull <span class="hljs-selector-attr">[远程仓库名]</span> <span class="hljs-selector-attr">[分支名]</span><br>git pull origin <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure><p>最后</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客报错汇总</title>
    <link href="/2022/11/04/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/"/>
    <url>/2022/11/04/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p><img src="D:\myblog\source\img\博客搭建报错汇总\1.png" alt="image-20241104150348082"></p><p>尝试以下几种方法：</p><p>（1）个人主页-Settings</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\2.png" alt="image-20241104150610933"></p><p>点击Disable</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\3.png" alt="image-20241104150652741"></p><p>（2）去到个人仓库-Settings-Code security，关闭Secret scanning</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\4.png"></p><p>（3）个人主页-Settings，取消勾选即可</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\5.png" alt="image-20241104151655331"></p><p><img src="D:\myblog\source\img\博客搭建报错汇总\6.png" alt="image-20241104151723263"></p><p>（4）将博客根目录的_config.yml文件中的repository修改成SSH地址，前提是要生成SSH密钥地址（自己上网搜一下教程）</p><p><img src="D:\myblog\source\img\博客搭建报错汇总\7.png" alt="image-20241104151937932"></p><p>上面所示的方法尝试完后，输入命令：</p><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><p>如若还是不行，请在评论区留言</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Github Pages + Hexo搭建博客</title>
    <link href="/2022/11/03/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/03/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用GitHub Pages + Hexo搭建个人博客网站，完全免费，所有内容本人亲测，绝对可用。</p><h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><h5 id="1-GitHub账号"><a href="#1-GitHub账号" class="headerlink" title="1. GitHub账号"></a>1. <a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020">GitHub</a>账号</h5><p>需要有一个<code>GitHub</code>账号，没有的话到 <a href="https://github.com/">官网 </a>申请一个。<br>注册很简单，不懂的话可以参考 <a href="https://blog.csdn.net/yaorongke/article/details/119086305">GitHub申请账号</a></p><h5 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h5><p>在自己电脑上安装好<code>Git</code>，<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>部署到<code>GitHub</code>时要用。<br>网上找篇教程或者参考 <a href="https://blog.csdn.net/yaorongke/article/details/119085413">Git安装(Windows)</a></p><h5 id="3-安装NodeJS"><a href="#3-安装NodeJS" class="headerlink" title="3. 安装NodeJS"></a>3. 安装NodeJS</h5><p>在自己电脑上安装好<code>NodeJS</code>，<code>Hexo</code>是基于<code>NodeJS</code>编写的，所以需要安装<code>NodeJS</code>和<code>npm</code>工具。<br>网上找篇教程或者参考 <a href="https://blog.csdn.net/yaorongke/article/details/119084295">NodeJS安装及配置(Windows)</a></p><h4 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h4><p>在<code>GitHub</code>上创建一个新的代码仓库用于保存我们的网页。</p><p>点击<code>Your repositories</code>，进入仓库页面。<br><img src="/../img/Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/1.png"><br>点击<code>New</code>按钮，进入仓库创建页面。<br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/2.png" alt="请添加图片描述"><br>填写仓库名，格式必须为<code>&lt;用户名&gt;.github.io</code>，然后点击<code>Create repository</code>。<br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/3.png" alt="请添加图片描述"><br>点击<code>creating a new file</code>创建一个新文件，作为我们网站的主页。<br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/4.png" alt="请添加图片描述"><br>新文件的名字必须为<code>index.html</code>，内容先随便写一个简单的，内容示例如下，填写之后点击<code>Commit new file</code>提交。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>yaorongke<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>yaorongke的个人主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/5.png" alt="请添加图片描述"><br>GitHub Pages中找到我们主页的地址为 <a href="https://chenqi005.github.io/">https://chenqi005.github.io/</a><br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/6.png" alt="请添加图片描述"><br>浏览器中访问，展示成功。<br><img src="D:/hexo-blog/source/img/Github-Pages-Hexo搭建个人博客网站/7.png" alt="image-20241030150314631"><br>这里创建的网页是非常简陋的，只是为了演示下<code>GitHub Pages</code>的使用方式。</p><h4 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h4><p>我们采用<code>Hexo</code>来创建我们的博客网站，<code>Hexo</code> 是一个基于<code>NodeJS</code>的静态博客网站生成器，使用<code>Hexo</code>不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入 <a href="https://hexo.io/zh-cn/">官网</a>。</p><p>安装 <code>Hexo</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p>创建一个项目 <code>hexo-blog</code> 并初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hexo-blog<br>cd hexo-blog<br>npm install<br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，页面默认主图风格如下">http://localhost:4000，页面默认主图风格如下</a><br><img src="https://i-blog.csdnimg.cn/blog_migrate/1fa17b1845debf8e2670ffeba4a9dee0.png" alt="请添加图片描述"></p><h4 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h4><p><code>Hexo</code> 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，官网主题点 <a href="https://hexo.io/themes/">这里</a> 查看。这里介绍两个主题的使用方法，<code>Next</code> 和 <code>Fluid</code>，个人比较喜欢<code>Fluid</code>，后面章节的功能也是以 <code>Fluid</code> 为基础进行讲解的。</p><h5 id="1-NexT-主题"><a href="#1-NexT-主题" class="headerlink" title="1. NexT 主题"></a>1. NexT 主题</h5><p><strong>安装主题</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd hexo-blog<br>git clone https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p><strong>使用 NexT 主题</strong></p><p>打开 _config.yml 文件，该文件为站点配置文件<br><img src="https://i-blog.csdnimg.cn/blog_migrate/92988aea1bce3f6808d390c818ae198e.png" alt="请添加图片描述"><br>将主题修改为 next</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">theme: next<br></code></pre></td></tr></table></figure><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><h5 id="2-Fluid主题"><a href="#2-Fluid主题" class="headerlink" title="2. Fluid主题"></a>2. Fluid主题</h5><p>以下安装步骤摘自 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid官网</a></p><p><strong>安装主题</strong></p><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><p><strong>指定主题</strong></p><p>如下修改 <code>Hexo</code> 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">theme: fluid  # 指定主题<br>language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改<br></code></pre></td></tr></table></figure><p><strong>创建「关于页」</strong></p><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: about<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2020</span>-<span class="hljs-number">02</span>-<span class="hljs-number">23</span> <span class="hljs-number">19</span>:<span class="hljs-number">20</span>:<span class="hljs-number">33</span><br><span class="hljs-attribute">layout</span>: about<br></code></pre></td></tr></table></figure><p>这里记得在冒号后必须打一个空格，不然会报错。</p><p>接着下面写“关于页”的正文，支持 Markdown, HTML</p><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，`Fluid`主题风格页面如下">http://localhost:4000，`Fluid`主题风格页面如下</a><br><img src="https://i-blog.csdnimg.cn/blog_migrate/c740ecd3f5dac4c831d0903d1317e180.png" alt="请添加图片描述"></p><h4 id="四、创建文章"><a href="#四、创建文章" class="headerlink" title="四、创建文章"></a>四、创建文章</h4><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行如下命令创建一篇新文章，名为《测试文章》</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post 测试文章<br></code></pre></td></tr></table></figure><p>执行完成后在<code>source\_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)<br><img src="https://i-blog.csdnimg.cn/blog_migrate/bc04cff11fa1fa108c48f1e9c4fdd4ce.png" alt="请添加图片描述"></p><p>文章编辑格式如下：</p><img src="C:/Users/lenovopc/hexo-blog/source/img/test/test.png" style="zoom:60%;" /><p>如何向文章中插入图片并且能够在页面上显示？</p><p>首先在hexo-blog\source目录下新建一个img文件夹，用于存放文章中需要用到的图片。</p><p>然后使用<img>标签将图像嵌入文档即可，这里src可以填写相对路径。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;img src=<span class="hljs-string">&quot;../img/test/test.jpg&quot;</span> <span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;zoom:33%;&quot;</span> /&gt;<br>其他属性：<br>alt：包含一条对图像的文本描述，通常在图像无法加载或者用户使用辅助技术（如屏幕阅读器）时显示。<br><span class="hljs-built_in">width</span>：宽度<br><span class="hljs-built_in">height</span>：高度<br><span class="hljs-built_in">title</span>：这个属性用于提供有关图像的额外信息，通常在鼠标悬停在图像上时显示为工具提示。<br><span class="hljs-built_in">style</span>=<span class="hljs-string">&quot;zoom:xx%;&quot;</span>：进行缩放<br></code></pre></td></tr></table></figure><p><strong>本地启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000，页面如下，文章添加成功">http://localhost:4000，页面如下，文章添加成功</a><br><img src="C:/Users/lenovopc/hexo-blog/source/img/test/test1.png" style="zoom:60%;" /></p><h4 id="五、个性化页面展示"><a href="#五、个性化页面展示" class="headerlink" title="五、个性化页面展示"></a>五、个性化页面展示</h4><p>页面的标题等位置显示默认的文字，可以改下显示一些个性化的信息。</p><h5 id="1-浏览器tab页名称"><a href="#1-浏览器tab页名称" class="headerlink" title="1. 浏览器tab页名称"></a>1. 浏览器tab页名称</h5><p>修改根目录下 <code>_config.yml</code> 中的 <code>title</code> 字段。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/9f5d2682398a9bf2dd3d22300d1bfa34.png" alt="请添加图片描述"></p><h5 id="2-博客标题"><a href="#2-博客标题" class="headerlink" title="2. 博客标题"></a>2. 博客标题</h5><p>主题目录 <code>themes\fluid</code> 下 <code>_config.yml</code> 中的 <code>blog_title</code> 字段。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/90a3f984cd9e7fa62c5edf7140968163.png" alt="请添加图片描述"></p><h5 id="3-主页正中间的文字"><a href="#3-主页正中间的文字" class="headerlink" title="3. 主页正中间的文字"></a>3. 主页正中间的文字</h5><p>主题目录 <code>themes\fluid</code> 下 <code>_config.yml</code> 中的 <code>text</code> 字段。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d1d671af5913fc79fceeef00ef91e2bc.png" alt="请添加图片描述"><br>修改好配置后，页面效果如下，可以看到现在显示的内容变成了我们的个人信息。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f72cdf670c6cf0e0fbee7becf93e9292.png" alt="请添加图片描述"></p><h4 id="六、添加阅读量统计"><a href="#六、添加阅读量统计" class="headerlink" title="六、添加阅读量统计"></a>六、添加阅读量统计</h4><p><code>Fluid</code> 主题写好了统计阅读量的代码，但是缺少相应配置所以没有开启，需要借助三方服务来统计阅读量，这里是有 <code>Leancloud</code> 的免费服务来进行统计。</p><h5 id="1-申请LeanCloud账号并创建应用"><a href="#1-申请LeanCloud账号并创建应用" class="headerlink" title="1. 申请LeanCloud账号并创建应用"></a>1. 申请LeanCloud账号并创建应用</h5><p>进入 <a href="https://console.leancloud.cn/">官网</a> 注册账号<br><img src="https://i-blog.csdnimg.cn/blog_migrate/a428fe73847ed99303fe3b5013b256f4.png" alt="请添加图片描述"><br>需实名认证，完成后才能使用各项服务<br><img src="https://i-blog.csdnimg.cn/blog_migrate/05ed44aeccc043fbb0b9e16caea84801.png" alt="请添加图片描述"><br>验证邮箱<br><img src="https://i-blog.csdnimg.cn/blog_migrate/2f5e9021aebdb7c2bc08f22e0676b89f.png" alt="请添加图片描述"><br>创建应用，选择<code>开发版</code>即可，免费的<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c1017a718b6bb23826d7cc1ccf919990.png" alt="请添加图片描述"><br>进入该应用的 <code>设置-&gt;应用凭证</code>，找到 <code>AppID</code> 和 <code>AppKey</code>，记录下来后面配置要用<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f87d88766a4ecd13a5f58b79bcc8b65b.png" alt="请添加图片描述"></p><h5 id="2-修改Fluid配置"><a href="#2-修改Fluid配置" class="headerlink" title="2. 修改Fluid配置"></a>2. 修改Fluid配置</h5><p>打开主题目录 <code>themes\fluid</code>下的 <code>_config.yml</code> 文件，修改如下配置</p><h6 id="单篇文章阅读量计数"><a href="#单篇文章阅读量计数" class="headerlink" title="单篇文章阅读量计数"></a>单篇文章阅读量计数</h6><p>打开统计开关<br><img src="https://i-blog.csdnimg.cn/blog_migrate/a031a8e85bcf012bfad1ec3becf022da.png" alt="请添加图片描述"><br>配置 <code>leancloud</code>的 <code>app_id</code> 和 <code>app_key</code><br><img src="https://i-blog.csdnimg.cn/blog_migrate/300f300c219f964dd9ba6ef14cdab59d.png" alt="请添加图片描述"><br>打开计数功能，统计来源改为 <code>leancloud</code><br><img src="https://i-blog.csdnimg.cn/blog_migrate/796283f28fbff5f9b91360397c826b77.png" alt="请添加图片描述"><br>页面效果<br><img src="https://i-blog.csdnimg.cn/blog_migrate/a6db78c41b487482be1977e36b64b907.png" alt="请添加图片描述"></p><h6 id="页面底部展示网站的-PV、UV-统计数"><a href="#页面底部展示网站的-PV、UV-统计数" class="headerlink" title="页面底部展示网站的 PV、UV 统计数"></a>页面底部展示网站的 PV、UV 统计数</h6><p><img src="https://i-blog.csdnimg.cn/blog_migrate/70139f6941117c66be425475ca5c65c7.png" alt="请添加图片描述"><br>页面效果<br><img src="https://i-blog.csdnimg.cn/blog_migrate/92a20c061c5feabccc668810a38926b2.png" alt="请添加图片描述"></p><h4 id="七、添加评论功能"><a href="#七、添加评论功能" class="headerlink" title="七、添加评论功能"></a>七、添加评论功能</h4><p>评论功能的代码已经写好了，只不过没有开启，需要修改一些配置</p><p>打开主题目录 <code>themes\fluid</code>下的 <code>_config.yml</code> 文件，修改如下配置</p><p>启用评论插件<br><img src="https://i-blog.csdnimg.cn/blog_migrate/3156e87e87fd3e2f4ba858bfb7bf098f.png" alt="请添加图片描述"><br>配置 <code>LeanCloud</code> 的 <code>appId</code> 和 <code>appkey</code><br><img src="https://i-blog.csdnimg.cn/blog_migrate/820f3cb524e7e73ae7042893cc5a38a6.png" alt="请添加图片描述"><br>重新部署后，查看页面效果，评论功能已开启<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0b00f4e78c1d058163d89a80431d3954.png" alt="请添加图片描述"><br>部署在本地时评论无法提交，会报跨域问题，发布到 <code>GitHub Pages</code> 上之后课正常提交评论</p><h4 id="八、发布到GitHub-Pages"><a href="#八、发布到GitHub-Pages" class="headerlink" title="八、发布到GitHub Pages"></a>八、发布到GitHub Pages</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>安装hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p>修改根目录下的 <code>_config.yml</code>，配置 <code>GitHub</code> 相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/chenqi005/chenqi005.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">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</span><br><br></code></pre></td></tr></table></figure><p>其中 <code>token</code> 为 <code>GitHub</code> 的 <code>Personal access tokens</code>，获取方式如下图：</p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20241030202536126.png" alt="image-20241030202536126"></p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20241030202518158.png" alt="image-20241030202518158"></p><p><img src="C:\Users\lenovopc\AppData\Roaming\Typora\typora-user-images\image-20241030202319295.png" alt="image-20241030202319295"></p><p>部署到GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="https://yaorongke.github.io/%EF%BC%8C%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F">https://yaorongke.github.io/，部署成功</a><br><img src="https://i-blog.csdnimg.cn/blog_migrate/00ef2fb7c3fd72101036c976ac78dc09.png" alt="请添加图片描述"></p><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>直接将 <code>public</code> 目录中的文件和目录推送至 <code>GitHub</code> 仓库和分支中。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d8f74b8200026dee4bd2939fb4c5aacb.png" alt="请添加图片描述"></p><h4 id="九、发布到自己服务器，Nginx代理"><a href="#九、发布到自己服务器，Nginx代理" class="headerlink" title="九、发布到自己服务器，Nginx代理"></a>九、发布到自己服务器，Nginx代理</h4><p>如果自己有服务器的话，也可以不使用 <code>GitHub Pages</code>，直接部署的自己的服务器上，通过 <code>Nginx</code> 进行代理，我这里有一个阿里云上的 <code>CentOS 7</code> 版的 <code>Linux</code> 服务器，演示下如何部署，步骤如下。</p><p>打开 <code>hexo-blog</code> 根目录下的 <code>_config.yml</code>，增加如下配置，这是因为把网站存放在了子目录中，要和 <code>Nginx</code> 配置中的 <code>location /blog</code> 路径一致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root: /blog<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p><code>hexo-blog</code> 根目录下执行打包命令，打包好的文件在 <code>public</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p>将<code>public</code> 目录下的文件复制到 <code>Linux</code> 服务器上的某个目录下，我的存放目录为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/rkyao/fronted/hexo-blog<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><p>修改 <code>Nginx</code> 配置文件，我的 <code>Nginx</code> 安装路径为 <code>/usr/local</code>，大家根据自己实际情况调整</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/conf<br>vim nginx.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">server节点下添加如下配置</span><br>location /blog &#123;<br>    alias  /opt/rkyao/fronted/hexo-blog;<br>    index  index.html index.htm;<br>&#125;<br><br> <br> <br> <br> 12345671234567<br></code></pre></td></tr></table></figure><p>重启 <code>Nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br>./nginx -s reload<br><br> <br> <br> <br> 1212<br></code></pre></td></tr></table></figure><p>访问博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://47.96.106.173/blog/<br><br> <br> <br> <br> 11<br></code></pre></td></tr></table></figure><h4 id="十、最终效果展示"><a href="#十、最终效果展示" class="headerlink" title="十、最终效果展示"></a>十、最终效果展示</h4><p>可访问如下地址查看<br><a href="https://yaorongke.github.io/">https://yaorongke.github.io/</a></p><p>转载：<a href="https://blog.csdn.net/yaorongke/article/details/119089190?utm_medium=distribute.pc_feed_v2.none-task-blog-hot-10.pc_personrecdepth_1-utm_source=distribute.pc_feed_v2.none-task-blog-hot-10.pc_personrec">https://blog.csdn.net/yaorongke/article/details/119089190?utm_medium=distribute.pc_feed_v2.none-task-blog-hot-10.pc_personrecdepth_1-utm_source=distribute.pc_feed_v2.none-task-blog-hot-10.pc_personrec</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
